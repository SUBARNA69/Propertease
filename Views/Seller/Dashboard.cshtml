@{
    ViewData["Title"] = "Seller Dashboard";
    Layout = "_Layout";
}

<!-- Flowbite CSS and JS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.1/flowbite.min.js"></script>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="flex">
    <!-- Main Content -->
    <div class="p-4 max-w-7xl mx-auto">
        <!-- Header -->
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
            <div>
                <h1 class="text-2xl font-semibold">Welcome back, @ViewBag.Name!</h1>
                <p class="text-gray-600">Here's what's happening with your properties</p>
            </div>
            <a href="@Url.Action("AddProperty", "Seller")" class="text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-purple-600 dark:hover:bg-purple-700 focus:outline-none dark:focus:ring-purple-800">
                + Add New Listing
            </a>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-blue-100 text-blue-500 dark:bg-blue-800 dark:text-blue-200">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M5 0H1a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1Zm14 0h-4a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1ZM5 14H1a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1Zm14 0h-4a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1ZM12 2H8a1 1 0 0 0 0 2h4a1 1 0 1 0 0-2Zm0 14H8a1 1 0 0 0 0 2h4a1 1 0 0 0 0-2Zm-8-4V8a1 1 0 0 0-2 0v4a1 1 0 1 0 2 0Zm14 0V8a1 1 0 0 0-2 0v4a1 1 0 0 0 2 0Z" />
                        </svg>
                    </div>
                    <div class="ms-3">
                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Total Listings</p>
                        <h3 class="text-xl font-bold">@ViewBag.TotalListings</h3>
                    </div>
                </div>
            </div>
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-yellow-100 text-yellow-500 dark:bg-yellow-800 dark:text-yellow-200">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm3.982 13.982a1 1 0 0 1-1.414 0l-3.274-3.274A1.012 1.012 0 0 1 9 10V6a1 1 0 0 1 2 0v3.586l2.982 2.982a1 1 0 0 1 0 1.414Z" />
                        </svg>
                    </div>
                    <div class="ms-3">
                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Pending Approvals</p>
                        <h3 class="text-xl font-bold">@ViewBag.PendingApprovals</h3>
                    </div>
                </div>
            </div>
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-red-100 text-red-500 dark:bg-red-800 dark:text-red-200">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM10 15a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm1-4a1 1 0 0 1-2 0V6a1 1 0 0 1 2 0v5Z" />
                        </svg>
                    </div>
                    <div class="ms-3">
                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Rejected Properties</p>
                        <h3 class="text-xl font-bold">@ViewBag.NewInquiries</h3>
                    </div>
                </div>
            </div>
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="inline-flex items-center justify-center flex-shrink-0 w-8 h-8 rounded-lg bg-green-100 text-green-500 dark:bg-green-800 dark:text-green-200">
                        <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M19.725 9.292a1 1 0 0 0-.768-.256l-2.839.521V7.994a1 1 0 0 0-.703-.953l-5.3-1.529V3.383l1.423.641a1 1 0 0 0 1.285-.438l.617-1.25a1 1 0 0 0-.438-1.342l-6.33-3.136a1 1 0 0 0-1.344.438l-.616 1.25a1 1 0 0 0 .437 1.342l1.529.7V5.5a1 1 0 0 0 .724.962l5.3 1.529v.461l-5.11.931a1 1 0 0 0-.813.984v2.823L2.9 11.866a1 1 0 0 0-.813.983v4.5a1 1 0 0 0 1.164.983l7.389-1.346a1 1 0 0 0 .813-.983v-.461l7.389-1.346a1 1 0 0 0 .813-.983v-4.5a1 1 0 0 0-.93-.921ZM8.5 16.057l-5 .909v-2.117l5-.909v2.117Z" />
                        </svg>
                    </div>
                    <div class="ms-3">
                        <p class="text-sm font-medium text-gray-500 dark:text-gray-400">Active Properties</p>
                        <h3 class="text-xl font-bold">@ViewBag.ActiveProperties</h3>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <!-- Sold Properties Chart (Now as Bar Graph) -->
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700 lg:col-span-2">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Sold Properties By Month</h3>
                    <div>
                        <select id="chartPeriod" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                            <option value="monthly">Monthly</option>
                        </select>
                    </div>
                </div>
                <div class="relative h-80">
                    <canvas id="soldPropertiesChart"></canvas>
                </div>
            </div>

            <!-- Property Status Chart -->
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700">
                <h3 class="text-lg font-semibold mb-4">Property Status</h3>
                <div class="relative h-64">
                    <canvas id="propertyStatusChart"></canvas>
                </div>
            </div>

            <!-- Property Type Distribution -->
            <div class="bg-white border border-gray-200 rounded-lg shadow p-4 dark:bg-gray-800 dark:border-gray-700">
                <h3 class="text-lg font-semibold mb-4">Property Types</h3>
                <div class="relative h-64">
                    <canvas id="propertyTypeChart"></canvas>
                </div>
            </div>
        </div>

       
        
<!-- Chart.js Initialization -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Sold Properties Chart (Now as Bar Graph)
        const soldCtx = document.getElementById('soldPropertiesChart').getContext('2d');

        // Get data from ViewBag or use default values if not available
        const months = @Html.Raw(Json.Serialize(ViewBag.SoldPropertiesMonths ?? new List<string>() { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul" }));
        const soldCounts = @Html.Raw(Json.Serialize(ViewBag.SoldPropertiesCounts ?? new List<int>() { 0, 0, 0, 0, 0, 0, 0 }));

        const soldPropertiesChart = new Chart(soldCtx, {
            type: 'bar', // Changed from 'line' to 'bar'
            data: {
                labels: months,
                datasets: [{
                    label: 'Sold Properties',
                    data: soldCounts,
                    backgroundColor: 'rgba(16, 185, 129, 0.8)', // Solid color for bars
                    borderColor: 'rgba(16, 185, 129, 1)',
                    borderWidth: 1,
                    borderRadius: 4, // Rounded corners on bars
                    barPercentage: 0.6, // Make bars slightly thinner
                    categoryPercentage: 0.8
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            title: function(tooltipItems) {
                                return 'Sold Properties - ' + tooltipItems[0].label;
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            drawBorder: false
                        },
                        ticks: {
                            precision: 0 // Only show whole numbers
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });

        // Property Status Chart
        const statusCtx = document.getElementById('propertyStatusChart').getContext('2d');
        const propertyStatusChart = new Chart(statusCtx, {
            type: 'bar',
            data: {
                labels: ['Active', 'Pending', 'Rejected', 'Sold'],
                datasets: [{
                    label: 'Properties',
                    data: [
    @ViewBag.ActiveProperties,
    @ViewBag.PendingApprovals,
    @ViewBag.NewInquiries,
    @(ViewBag.SoldProperties ?? 0)
                    ],
                    backgroundColor: [
                        'rgba(16, 185, 129, 0.8)',  // Green for Active
                        'rgba(245, 158, 11, 0.8)',  // Amber for Pending
                        'rgba(239, 68, 68, 0.8)',   // Red for Rejected
                        'rgba(59, 130, 246, 0.8)'   // Blue for Sold
                    ],
                    borderRadius: 4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            drawBorder: false
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                }
            }
        });

           // Replace the static Property Type Chart initialization in your view with:
    const typeCtx = document.getElementById('propertyTypeChart').getContext('2d');

    // Get dynamic data from ViewBag
    const propertyTypeLabels = @Html.Raw(Json.Serialize(ViewBag.PropertyTypeLabels ?? new List<string>() { "House", "Apartment", "Land" }));
    const propertyTypeCounts = @Html.Raw(Json.Serialize(ViewBag.PropertyTypeCounts ?? new List<int>() { 0, 0, 0 }));

    // Dynamic colors based on the number of property types
    const generateColors = (count) => {
        const colors = [
            'rgba(59, 130, 246, 0.8)',  // Blue
            'rgba(139, 92, 246, 0.8)',  // Purple
            'rgba(236, 72, 153, 0.8)',  // Pink
            'rgba(16, 185, 129, 0.8)',  // Green
            'rgba(245, 158, 11, 0.8)',  // Amber
            'rgba(239, 68, 68, 0.8)',   // Red
            'rgba(75, 85, 99, 0.8)'     // Gray
        ];

        // Return colors for the number of property types (cycle through if more types than colors)
        return Array(count).fill().map((_, i) => colors[i % colors.length]);
    };

    const propertyTypeChart = new Chart(typeCtx, {
        type: 'pie',
        data: {
            labels: propertyTypeLabels,
            datasets: [{
                data: propertyTypeCounts,
                backgroundColor: generateColors(propertyTypeLabels.length),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                },
                tooltip: {
                    callbacks: {
                        title: function(tooltipItems) {
                            return tooltipItems[0].label;
                        },
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.raw || 0;
                            const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                            const percentage = Math.round((value / total) * 100);
                            return `${label}: ${value} (${percentage}%)`;
                        }
                    }
                }
            }
        }
    });

        // Chart period selector
        document.getElementById('chartPeriod').addEventListener('change', function() {
            const period = this.value;

            // In a real implementation, you would fetch different data based on the period
            // For now, we'll just simulate different data
           
                // Reset to the original monthly data
                soldPropertiesChart.data.labels = months;
                soldPropertiesChart.data.datasets[0].data = soldCounts;
            

            soldPropertiesChart.update();
        });
    });
</script>