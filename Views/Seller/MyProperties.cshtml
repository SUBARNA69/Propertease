@model IEnumerable<Properties>
@using PROPERTEASE.Models

@{
    ViewData["Title"] = "My Properties";
}

<div class="max-w-7xl mx-auto mt-6 p-6 bg-white shadow-lg rounded-lg">
    <!-- Header with stats -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <div>
            <h2 class="text-2xl font-bold text-gray-800">My Properties</h2>
            <p class="text-gray-500 mt-1">Manage and boost your property listings</p>
        </div>
        <a asp-action="AddProperty" class="mt-4 hidden md:mt-0 inline-flex items-center px-5 py-2.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg focus:ring-4 focus:ring-blue-300 transition duration-300">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
            </svg>
            Add New Property
        </a>
    </div>

    <!-- Stats summary -->
    <div class="flex flex-nowrap overflow-x-auto gap-2 mb-6 pb-2">
        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-blue-500 bg-blue-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Total</p>
                    <h2 class="text-base font-semibold text-gray-900">@Model.Count()</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-green-500 bg-green-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Approved</p>
                    <h2 class="text-base font-semibold text-gray-900">@Model.Count(p => p.Status == "Approved")</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-yellow-500 bg-yellow-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Pending</p>
                    <h2 class="text-base font-semibold text-gray-900">@Model.Count(p => p.Status == "Pending")</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-red-500 bg-red-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Rejected</p>
                    <h2 class="text-base font-semibold text-gray-900">@Model.Count(p => p.Status == "Rejected")</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-purple-500 bg-purple-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Boosted</p>
                    @{
                        var allBoostedProperties = ViewBag.BoostedProperties as List<BoostedProperty>;
                        var boostedCount = allBoostedProperties != null ?
                        allBoostedProperties.Count(bp => bp.IsActive) : 0;
                    }
                    <h2 class="text-base font-semibold text-gray-900">@boostedCount</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter/Search Controls -->
    <div class="mb-6 flex flex-col md:flex-row gap-4">
        <div class="relative flex-grow">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                </svg>
            </div>
            <input type="text" id="searchInput" placeholder="Search properties..."
                   class="pl-10 px-4 py-2.5 border rounded-lg shadow-sm w-full bg-gray-50 focus:ring-blue-500 focus:border-blue-500">
        </div>
        <div class="flex flex-wrap gap-3">
            <select id="statusFilter" class="px-4 py-2.5 border rounded-lg shadow-sm bg-gray-50 focus:ring-blue-500 focus:border-blue-500">
                <option value="">All Statuses</option>
                <option value="Approved">Approved</option>
                <option value="Pending">Pending</option>
                <option value="Rejected">Rejected</option>
            </select>
            <select id="boostFilter" class="px-4 py-2.5 border rounded-lg shadow-sm bg-gray-50 focus:ring-blue-500 focus:border-blue-500">
                <option value="">All Properties</option>
                <option value="boosted">Boosted Properties</option>
                <option value="not-boosted">Not Boosted Properties</option>
            </select>
            <button onclick="resetFilters()" class="px-4 py-2.5 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-gray-200">
                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Reset
            </button>
        </div>
    </div>

    <!-- Properties Table -->
    <div class="overflow-x-auto rounded-lg shadow mb-6">
        <table class="min-w-full bg-white">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Property</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Boost Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200" id="property-table-body">
                @foreach (var property in Model)
                {
                    <tr class="hover:bg-gray-50 transition-colors">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-12 w-12 bg-gray-200 rounded-md overflow-hidden">
                                    @if (property.PropertyImages != null && property.PropertyImages.Any())
                                    {
                                        <img class="h-12 w-12 object-cover" src="~/Images/@property.PropertyImages.First().Photo" alt="@property.Title">
                                    }
                                    else
                                    {
                                        <div class="h-12 w-12 flex items-center justify-center">
                                            <svg class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                                            </svg>
                                        </div>
                                    }
                                </div>
                                <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-900">@property.Title</div>
                                    <div class="text-xs text-gray-500">ID: @property.Id</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2.5 py-1 text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                @property.PropertyType
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            ₹@property.Price.ToString("N0")
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            @property.City, @property.District
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            @{
                                var statusClass = property.Status switch
                                {
                                    "Approved" => "bg-green-100 text-green-800",
                                    "Pending" => "bg-yellow-100 text-yellow-800",
                                    "Rejected" => "bg-red-100 text-red-800",
                                    _ => "bg-gray-100 text-gray-800"
                                };
                            }
                            <span class="px-2.5 py-1 text-xs leading-5 font-semibold rounded-full @statusClass">
                                @property.Status
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap boost-status-cell">
                            @{
                                var propertyBoostedInfo = ViewBag.BoostedProperties as List<BoostedProperty>;
                                var boostedProperty = propertyBoostedInfo != null ?
                                propertyBoostedInfo.FirstOrDefault(bp => bp.PropertyId == property.Id) : null;
                            }
                            @if (boostedProperty != null && boostedProperty.IsActive)
                            {
                                <div class="flex items-center">
                                    <span class="inline-flex items-center px-2.5 py-1 text-xs leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">
                                        <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" d="M5 2a1 1 0 011 1v1h1a1 1 0 010 2H6v1a1 1 0 01-2 0V6H3a1 1 0 010-2h1V3a1 1 0 011-1zm0 10a1 1 0 011 1v1h1a1 1 0 110 2H6v1a1 1 0 11-2 0v-1H3a1 1 0 110-2h1v-1a1 1 0 011-1zM12 2a1 1 0 01.967.744L14.146 7.2 17.5 9.134a1 1 0 010 1.732l-3.354 1.935-1.18 4.455a1 1 0 01-1.933 0L9.854 12.8 6.5 10.866a1 1 0 010-1.732l3.354-1.935 1.18-4.455A1 1 0 0112 2z" clip-rule="evenodd"></path>
                                        </svg>
                                        Boosted
                                    </span>
                                    <span class="ml-2 text-xs text-gray-500">
                                        until @boostedProperty.EndTime.ToString("MMM dd, HH:mm")
                                    </span>
                                </div>
                            }
                            else
                            {
                                <span class="px-2.5 py-1 text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                    Not Boosted
                                </span>
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div class="flex space-x-2">
                                <a href="@Url.Action("ViewPropertyDetails", "Seller", new { id = property.Id })"
                                   class="text-blue-600 hover:text-blue-900 hover:underline">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                </a>

                                <a href="@Url.Action("EditProperty", "Seller", new { id = property.Id })"
                                   class="text-yellow-600 hover:text-yellow-900 hover:underline">
                                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                                    </svg>
                                </a>

                                @{
                                    // Only show Boost button if property is approved AND not already boosted
                                    bool isAlreadyBoosted = boostedProperty != null && boostedProperty.IsActive;
                                    if (property.Status == "Approved" && !isAlreadyBoosted)
                                    {
                                        <a href="@Url.Action("Boost", "Seller", new { propertyId = property.Id })"
                                           class="text-purple-600 hover:text-purple-900 hover:underline">
                                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M11 17a1 1 0 001.447.894l4-2A1 1 0 0017 15V9.236a1 1 0 00-1.447-.894l-4 2a1 1 0 00-.553.894V17zM15.211 6.276a1 1 0 000-1.788l-4.764-2.382a1 1 0 00-.894 0L4.789 4.488a1 1 0 000 1.788l4.764 2.382a1 1 0 00.894 0l4.764-2.382zM4.447 8.342A1 1 0 003 9.236V15a1 1 0 00.553.894l4 2A1 1 0 009 17v-5.764a1 1 0 00-.553-.894l-4-2z"></path>
                                            </svg>
                                        </a>
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- No results message (hidden by default) -->
    <div id="no-results-message" class="hidden py-8 text-center bg-white rounded-lg shadow">
        <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">No properties found</h3>
        <p class="text-gray-500">Try adjusting your filters or search criteria</p>
        <button onclick="resetFilters()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Reset Filters</button>
    </div>

    <!-- Pagination Controls -->
    <div class="mt-6 flex justify-between items-center">
        <div class="text-sm text-gray-700">
            Showing <span class="font-medium">1</span> to <span class="font-medium">@Model.Count()</span> of <span class="font-medium">@Model.Count()</span> properties
        </div>
        <div class="flex space-x-2">
            <button class="px-3 py-1 border rounded-md bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50" disabled>
                Previous
            </button>
            <button class="px-3 py-1 border rounded-md bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50" disabled>
                Next
            </button>
        </div>
    </div>
</div>

<!-- JavaScript for filtering and search -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const boostFilter = document.getElementById('boostFilter');
        const tableRows = document.querySelectorAll('#property-table-body tr');
        const noResultsMessage = document.getElementById('no-results-message');

        // Add event listeners
        searchInput.addEventListener('keyup', applyFilters);
        statusFilter.addEventListener('change', applyFilters);
        boostFilter.addEventListener('change', applyFilters);

        function applyFilters() {
            const searchValue = searchInput.value.toLowerCase();
            const statusValue = statusFilter.value.toLowerCase();
            const boostValue = boostFilter.value.toLowerCase();

            let visibleCount = 0;

            tableRows.forEach(row => {
                let shouldShow = true;

                // Search filter
                if (searchValue) {
                    const rowText = row.textContent.toLowerCase();
                    if (rowText.indexOf(searchValue) === -1) {
                        shouldShow = false;
                    }
                }

                // Status filter
                if (statusValue && shouldShow) {
                    const statusCell = row.querySelector('td:nth-child(5)').textContent.trim().toLowerCase();
                    if (statusCell.indexOf(statusValue) === -1) {
                        shouldShow = false;
                    }
                }

                // Boost filter
                if (boostValue && shouldShow) {
                    const boostCell = row.querySelector('.boost-status-cell').textContent.trim().toLowerCase();
                    if (boostValue === 'boosted' && boostCell.indexOf('boosted') === -1) {
                        shouldShow = false;
                    } else if (boostValue === 'not-boosted' && boostCell.indexOf('not boosted') === -1) {
                        shouldShow = false;
                    }
                }

                // Show or hide the row
                row.style.display = shouldShow ? '' : 'none';

                if (shouldShow) {
                    visibleCount++;
                }
            });

            // Show/hide no results message
            if (visibleCount === 0) {
                noResultsMessage.classList.remove('hidden');
            } else {
                noResultsMessage.classList.add('hidden');
            }

            // Update the count in the pagination
            const countElements = document.querySelectorAll('.text-sm.text-gray-700 .font-medium');
            if (countElements.length >= 2) {
                countElements[1].textContent = visibleCount;
            }
        }
    });

    // Global function to reset filters
    function resetFilters() {
        const searchInput = document.getElementById('searchInput');
        const statusFilter = document.getElementById('statusFilter');
        const boostFilter = document.getElementById('boostFilter');
        const noResultsMessage = document.getElementById('no-results-message');

        if (searchInput) searchInput.value = '';
        if (statusFilter) statusFilter.value = '';
        if (boostFilter) boostFilter.value = '';
        if (noResultsMessage) noResultsMessage.classList.add('hidden');

        // Show all rows
        const tableRows = document.querySelectorAll('#property-table-body tr');
        tableRows.forEach(row => {
            row.style.display = '';
        });

        // Update the count in the pagination
        const countElements = document.querySelectorAll('.text-sm.text-gray-700 .font-medium');
        if (countElements.length >= 2) {
            countElements[1].textContent = tableRows.length;
        }
    }
</script>

