@model IEnumerable<Properties>
@using PROPERTEASE.Models

@{
    ViewData["Title"] = "My Properties";
}

<div class="max-w-6xl mx-auto mt-10 p-6 bg-white shadow-lg rounded-lg">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">My Properties</h2>
        <a asp-action="AddProperty" class="px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition duration-300">
            Add New Property
        </a>
    </div>

    <!-- Filter/Search Controls -->
    <div class="mb-6 flex flex-wrap gap-4">
        <div class="relative">
            <input type="text" id="searchInput" placeholder="Search properties..."
                   class="px-4 py-2 border rounded-lg shadow-sm w-full md:w-64">
        </div>
        <select id="statusFilter" class="px-4 py-2 border rounded-lg shadow-sm">
            <option value="">All Statuses</option>
            <option value="Approved">Approved</option>
            <option value="Pending">Pending</option>
            <option value="Rejected">Rejected</option>
        </select>
        <!-- Added Boost Filter -->
        <select id="boostFilter" class="px-4 py-2 border rounded-lg shadow-sm">
            <option value="">All Properties</option>
            <option value="boosted">Boosted Properties</option>
            <option value="not-boosted">Not Boosted Properties</option>
        </select>
    </div>

    <!-- Properties Table -->
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-200 rounded-lg">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Property</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Boost Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
                @foreach (var property in Model)
                {
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-10 w-10">
                                    @if (property.PropertyImages != null && property.PropertyImages.Any())
                                    {
                                        <img class="h-10 w-10 rounded-md object-cover" src="~/Images/@property.PropertyImages.First().Photo" alt="@property.Title">
                                    }
                                    else
                                    {
                                        <div class="h-10 w-10 rounded-md bg-gray-200 flex items-center justify-center">
                                            <span class="text-xs text-gray-500">No img</span>
                                        </div>
                                    }
                                </div>
                                <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-900">@property.Title</div>
                                    <div class="text-sm text-gray-500">ID: @property.Id</div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                @property.PropertyType
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            Rs. @property.Price.ToString("N0")
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            @property.City, @property.District
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            @{
                                var statusClass = property.Status switch
                                {
                                    "Approved" => "bg-green-100 text-green-800",
                                    "Pending" => "bg-yellow-100 text-yellow-800",
                                    "Rejected" => "bg-red-100 text-red-800",
                                    _ => "bg-gray-100 text-gray-800"
                                };
                            }
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full @statusClass">
                                @property.Status
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap boost-status-cell">
                            @{
                                var boostedProperties = ViewBag.BoostedProperties as List<BoostedProperty>;
                                var boostedProperty = boostedProperties != null ?
                                boostedProperties.FirstOrDefault(bp => bp.PropertyId == property.Id) : null;

                                if (boostedProperty != null && boostedProperty.IsActive)
                                {
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">
                                        Boosted until @boostedProperty.EndTime.ToString("MMM dd, HH:mm")
                                    </span>
                                }
                                else
                                {
                                    <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                        Not Boosted
                                    </span>
                                }
                            }
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div class="flex space-x-2">
                                <a href="@Url.Action("ViewPropertyDetails", "Seller", new { id = property.Id })"
                                   class="text-indigo-600 hover:text-indigo-900">View</a>

                                <a href="@Url.Action("EditProperty", "Seller", new { id = property.Id })"
                                   class="text-blue-600 hover:text-blue-900">Edit</a>

                                @{
                                    // Only show Boost button if property is approved AND not already boosted
                                    bool isAlreadyBoosted = boostedProperty != null && boostedProperty.IsActive;
                                    if (property.Status == "Approved" && !isAlreadyBoosted)
                                    {
                                        <a href="@Url.Action("Boost", "Seller", new { propertyId = property.Id })"
                                           class="text-purple-600 hover:text-purple-900 font-semibold">
                                            🚀 Boost
                                        </a>
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="mt-6 flex justify-between items-center">
        <div class="text-sm text-gray-700">
            Showing <span class="font-medium">1</span> to <span class="font-medium">@Model.Count()</span> of <span class="font-medium">@Model.Count()</span> properties
        </div>
        <div class="flex space-x-2">
            <button class="px-3 py-1 border rounded-md bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50" disabled>
                Previous
            </button>
            <button class="px-3 py-1 border rounded-md bg-white text-gray-700 hover:bg-gray-50 disabled:opacity-50" disabled>
                Next
            </button>
        </div>
    </div>
</div>

<!-- JavaScript for filtering and search -->
<script>
    $(document).ready(function() {
        // Search functionality
        $("#searchInput").on("keyup", function() {
            var value = $(this).val().toLowerCase();
            $("table tbody tr").filter(function() {
                $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
            });
        });

        // Status filter
        $("#statusFilter").on("change", function() {
            var value = $(this).val().toLowerCase();
            if (value === "") {
                $("table tbody tr").show();
            } else {
                $("table tbody tr").filter(function() {
                    var status = $(this).find("td:nth-child(5)").text().toLowerCase();
                    $(this).toggle(status.indexOf(value) > -1);
                });
            }

            // Apply boost filter as well
            applyBoostFilter();
        });

        // Boost filter
        $("#boostFilter").on("change", function() {
            applyBoostFilter();
        });

        function applyBoostFilter() {
            var boostValue = $("#boostFilter").val().toLowerCase();
            var statusValue = $("#statusFilter").val().toLowerCase();

            $("table tbody tr").each(function() {
                var shouldShow = true;

                // Check status filter
                if (statusValue !== "") {
                    var status = $(this).find("td:nth-child(5)").text().toLowerCase();
                    if (status.indexOf(statusValue) === -1) {
                        shouldShow = false;
                    }
                }

                // Check boost filter
                if (boostValue !== "" && shouldShow) {
                    var boostStatus = $(this).find(".boost-status-cell").text().toLowerCase();
                    if (boostValue === "boosted" && boostStatus.indexOf("boosted until") === -1) {
                        shouldShow = false;
                    } else if (boostValue === "not-boosted" && boostStatus.indexOf("not boosted") === -1) {
                        shouldShow = false;
                    }
                }

                $(this).toggle(shouldShow);
            });
        }
    });
</script>