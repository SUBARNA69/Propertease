@model IEnumerable<Propertease.Models.Properties>

@{
    ViewData["Title"] = "My Listings";
}

<div class="container mx-auto max-w-7xl p-6">
    <!-- Header with action button -->
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">My Listings</h1>
            <p class="text-gray-500 mt-1">Manage your property listings</p>
        </div>
        <a href="/Seller/AddProperty" class="mt-4 md:mt-0 inline-flex items-center px-5 py-2.5 text-sm font-medium text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:ring-4 focus:ring-blue-300">
            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
            </svg>
            Add New Property
        </a>
    </div>

    <!-- Replace the stats summary section with this more compact version -->
    <!-- Stats summary -->
    <div class="flex flex-nowrap overflow-x-auto gap-2 mb-6 pb-2">
        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-blue-500 bg-blue-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Total</p>
                    <h2 class="text-base font-semibold text-gray-900">@(Model?.Count() ?? 0)</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-green-500 bg-green-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Approved</p>
                    <h2 class="text-base font-semibold text-gray-900">@(Model?.Count(p => p.Status == "Approved") ?? 0)</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-yellow-500 bg-yellow-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Pending</p>
                    <h2 class="text-base font-semibold text-gray-900">@(Model?.Count(p => p.Status == "Pending") ?? 0)</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-red-500 bg-red-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Rejected</p>
                    <h2 class="text-base font-semibold text-gray-900">@(Model?.Count(p => p.Status == "Rejected") ?? 0)</h2>
                </div>
            </div>
        </div>

        <div class="p-3 bg-white border border-gray-200 rounded-lg shadow-sm min-w-[140px] flex-1">
            <div class="flex items-center">
                <div class="p-2 mr-3 text-purple-500 bg-purple-100 rounded-full">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 2a4 4 0 00-4 4v1H5a1 1 0 00-.994.89l-1 9A1 1 0 004 18h12a1 1 0 00.994-1.11l-1-9A1 1 0 0015 7h-1V6a4 4 0 00-4-4zm2 5V6a2 2 0 10-4 0v1h4zm-6 3a1 1 0 112 0 1 1 0 01-2 0zm7-1a1 1 0 100 2 1 1 0 000-2z" clip-rule="evenodd"></path>
                    </svg>
                </div>
                <div>
                    <p class="text-xs font-medium text-gray-500">Sold</p>
                    <h2 class="text-base font-semibold text-gray-900">@(Model?.Count(p => p.Status == "Sold") ?? 0)</h2>
                </div>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <!-- Filter and search -->
        <div class="flex flex-col md:flex-row justify-between mb-5">
            <div class="flex flex-col sm:flex-row gap-3 mb-4 md:mb-0">
                <select id="status-filter" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2.5">
                    <option value="all">All Status</option>
                    <option value="Approved">Approved</option>
                    <option value="Pending">Pending</option>
                    <option value="Rejected">Rejected</option>
                    <option value="Sold">Sold</option>
                </select>
                <select id="sort-by" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2.5">
                    <option value="price-high">Price: High to Low</option>
                    <option value="price-low">Price: Low to High</option>
                </select>
                <button onclick="resetFilters()" class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 focus:ring-4 focus:ring-gray-200">
                    <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Reset
                </button>
            </div>
            <div class="relative">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                    </svg>
                </div>
                <input type="search" id="property-search" class="block w-full p-2.5 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500" placeholder="Search properties...">
            </div>
        </div>

        <!-- Property table -->
        <div class="overflow-x-auto rounded-lg shadow mb-6">
            <table class="w-full text-sm text-left text-gray-500">
                <thead class="text-xs text-gray-700 uppercase bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3">Property</th>
                        <th scope="col" class="px-6 py-3">Price</th>
                        <th scope="col" class="px-6 py-3">Location</th>
                        <th scope="col" class="px-6 py-3">Description</th>
                        <th scope="col" class="px-6 py-3">Status</th>
                        <th scope="col" class="px-6 py-3">Actions</th>
                    </tr>
                </thead>
                <tbody id="property-table-body">
                    @foreach (var property in Model)
                    {
                        <tr class="bg-white border-b hover:bg-gray-50">
                            <td class="px-6 py-4">
                                <div class="flex items-center">
                                    <div class="w-16 h-16 bg-gray-200 rounded-lg overflow-hidden flex-shrink-0">
                                        @if (property.PropertyImages != null && property.PropertyImages.Any())
                                        {
                                            <img src="~/Images/@property.PropertyImages.First().Photo"
                                                 alt="@property.Title"
                                                 class="w-full h-full object-cover" />
                                        }
                                        else
                                        {
                                            <div class="w-full h-full flex items-center justify-center text-gray-500">
                                                <svg class="w-8 h-8" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                                                </svg>
                                            </div>
                                        }
                                    </div>
                                    <div class="ml-4">
                                        <p class="font-semibold text-gray-900">@property.Title</p>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 font-medium text-gray-900">₹@property.Price.ToString("N0")</td>
                            <td class="px-6 py-4">@property.City, @property.District</td>
                            <td class="px-6 py-4 max-w-xs truncate">@property.Description</td>
                            <td class="px-6 py-4">
                                <span class="px-2.5 py-1 text-xs font-semibold rounded-full
                                    @(property.Status == "Pending" ? "bg-yellow-100 text-yellow-800" :
                                      property.Status == "Approved" ? "bg-green-100 text-green-800" :
                                      property.Status == "Sold" ? "bg-purple-100 text-purple-800" :
                                      "bg-red-100 text-red-800")">
                                    @property.Status
                                </span>
                            </td>
                            <td class="px-6 py-4">
                                <div class="flex space-x-2">
                                    <a href="/Seller/ViewPropertyDetails/@property.Id" class="font-medium text-blue-600 hover:underline">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                    </a>
                                    <a href="/Seller/EditProperty/@property.Id" class="font-medium text-yellow-600 hover:underline">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                                        </svg>
                                    </a>
                                    <form asp-action="Delete" asp-controller="Seller" method="post" class="inline">
                                        <input type="hidden" name="id" value="@property.Id" />
                                        <button type="submit" class="font-medium text-red-600 hover:underline" onclick="return confirm('Are you sure you want to delete this property?')">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                        </button>
                                    </form>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- No results message (hidden by default) -->
        <div id="no-results-message" class="hidden py-8 text-center bg-white rounded-lg shadow">
            <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">No properties found</h3>
            <p class="text-gray-500">Try adjusting your filters or search criteria</p>
            <button onclick="resetFilters()" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Reset Filters</button>
        </div>
    }
    else
    {
        <!-- Empty state -->
        <div class="flex flex-col items-center justify-center p-12 bg-white border border-gray-200 rounded-lg shadow-sm">
            <svg class="w-16 h-16 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
            </svg>
            <h3 class="text-xl font-semibold text-gray-900 mb-2">No listings available</h3>
            <p class="text-gray-500 text-center mb-6">You haven't added any properties yet. Start by adding your first property.</p>
            <a href="/Seller/AddProperty" class="inline-flex items-center px-5 py-2.5 text-sm font-medium text-white bg-blue-700 hover:bg-blue-800 rounded-lg focus:ring-4 focus:ring-blue-300">
                <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
                Add Your First Property
            </a>
        </div>
    }
</div>

<!-- JavaScript for filtering and search functionality -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const statusFilter = document.getElementById('status-filter');
        const sortBy = document.getElementById('sort-by');
        const searchInput = document.getElementById('property-search');
        const tableBody = document.getElementById('property-table-body');
        const tableRows = tableBody ? tableBody.querySelectorAll('tr') : [];
        const noResultsMessage = document.getElementById('no-results-message');

        if (statusFilter && sortBy && searchInput && tableRows.length > 0) {
            // Add event listeners for filtering and sorting
            statusFilter.addEventListener('change', applyFilters);
            sortBy.addEventListener('change', applyFilters);
            searchInput.addEventListener('input', applyFilters);

            function applyFilters() {
                const selectedStatus = statusFilter.value;
                const selectedSort = sortBy.value;
                const searchTerm = searchInput.value.toLowerCase().trim();

                // Create an array from the NodeList for easier manipulation
                let filteredRows = Array.from(tableRows);

                // Filter by status
                if (selectedStatus !== 'all') {
                    filteredRows = filteredRows.filter(row => {
                        const statusBadge = row.querySelector('.rounded-full');
                        return statusBadge && statusBadge.textContent.trim() === selectedStatus;
                    });
                }

                // Filter by search term
                if (searchTerm) {
                    filteredRows = filteredRows.filter(row => {
                        const title = row.querySelector('.font-semibold.text-gray-900').textContent.toLowerCase();
                        const location = row.querySelectorAll('td')[2].textContent.toLowerCase();
                        const description = row.querySelectorAll('td')[3].textContent.toLowerCase();
                        return title.includes(searchTerm) ||
                               location.includes(searchTerm) ||
                               description.includes(searchTerm);
                    });
                }

                // Sort rows
                filteredRows.sort((a, b) => {
                    const priceA = extractPrice(a.querySelectorAll('td')[1].textContent);
                    const priceB = extractPrice(b.querySelectorAll('td')[1].textContent);

                    if (selectedSort === 'price-high') {
                        return priceB - priceA;
                    } else {
                        return priceA - priceB;
                    }
                });

                // Hide all rows first
                tableRows.forEach(row => {
                    row.style.display = 'none';
                });

                // Show only the filtered and sorted rows
                filteredRows.forEach(row => {
                    row.style.display = '';
                });

                // Show/hide no results message
                if (filteredRows.length === 0) {
                    noResultsMessage.classList.remove('hidden');
                } else {
                    noResultsMessage.classList.add('hidden');
                }

                // Update the count in the stats
                updateStats();
            }

            // Helper function to extract price value
            function extractPrice(priceText) {
                return parseInt(priceText.replace(/[₹,]/g, '')) || 0;
            }

            // Function to update the stats based on visible rows
            function updateStats() {
                const visibleRows = Array.from(tableRows).filter(row =>
                    row.style.display !== 'none'
                );

                const totalElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(1)');
                const approvedElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(2)');
                const pendingElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(3)');
                const rejectedElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(4)');
                const soldElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(5)');

                if (totalElement) {
                    totalElement.textContent = visibleRows.length;
                }

                if (approvedElement) {
                    const approvedCount = visibleRows.filter(row => {
                        const statusBadge = row.querySelector('.rounded-full');
                        return statusBadge && statusBadge.textContent.trim() === 'Approved';
                    }).length;
                    approvedElement.textContent = approvedCount;
                }

                if (pendingElement) {
                    const pendingCount = visibleRows.filter(row => {
                        const statusBadge = row.querySelector('.rounded-full');
                        return statusBadge && statusBadge.textContent.trim() === 'Pending';
                    }).length;
                    pendingElement.textContent = pendingCount;
                }

                if (rejectedElement) {
                    const rejectedCount = visibleRows.filter(row => {
                        const statusBadge = row.querySelector('.rounded-full');
                        return statusBadge && statusBadge.textContent.trim() === 'Rejected';
                    }).length;
                    rejectedElement.textContent = rejectedCount;
                }

                if (soldElement) {
                    const soldCount = visibleRows.filter(row => {
                        const statusBadge = row.querySelector('.rounded-full');
                        return statusBadge && statusBadge.textContent.trim() === 'Sold';
                    }).length;
                    soldElement.textContent = soldCount;
                }
            }
        }
    });

    // Global function to reset filters
    function resetFilters() {
        const statusFilter = document.getElementById('status-filter');
        const sortBy = document.getElementById('sort-by');
        const searchInput = document.getElementById('property-search');
        const noResultsMessage = document.getElementById('no-results-message');

        if (statusFilter) statusFilter.value = 'all';
        if (sortBy) sortBy.value = 'price-high';
        if (searchInput) searchInput.value = '';
        if (noResultsMessage) noResultsMessage.classList.add('hidden');

        // Trigger the change event to reapply filters
        if (statusFilter) statusFilter.dispatchEvent(new Event('change'));

        // Show all rows
        const tableRows = document.querySelectorAll('#property-table-body tr');
        tableRows.forEach(row => {
            row.style.display = '';
        });

        // Reset stats
        updateStats();
    }

    // Function to update stats (defined globally so it can be called from resetFilters)
    function updateStats() {
        const tableRows = document.querySelectorAll('#property-table-body tr');
        const visibleRows = Array.from(tableRows).filter(row =>
            row.style.display !== 'none'
        );

        const totalElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(1)');
        const approvedElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(2)');
        const pendingElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(3)');
        const rejectedElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(4)');
        const soldElement = document.querySelector('.flex.flex-nowrap.overflow-x-auto.gap-2.mb-6 h2:nth-of-type(5)');

        if (totalElement) {
            totalElement.textContent = visibleRows.length;
        }

        if (approvedElement) {
            const approvedCount = visibleRows.filter(row => {
                const statusBadge = row.querySelector('.rounded-full');
                return statusBadge && statusBadge.textContent.trim() === 'Approved';
            }).length;
            approvedElement.textContent = approvedCount;
        }

        if (pendingElement) {
            const pendingCount = visibleRows.filter(row => {
                const statusBadge = row.querySelector('.rounded-full');
                return statusBadge && statusBadge.textContent.trim() === 'Pending';
            }).length;
            pendingElement.textContent = pendingCount;
        }

        if (rejectedElement) {
            const rejectedCount = visibleRows.filter(row => {
                const statusBadge = row.querySelector('.rounded-full');
                return statusBadge && statusBadge.textContent.trim() === 'Rejected';
            }).length;
            rejectedElement.textContent = rejectedCount;
        }

        if (soldElement) {
            const soldCount = visibleRows.filter(row => {
                const statusBadge = row.querySelector('.rounded-full');
                return statusBadge && statusBadge.textContent.trim() === 'Sold';
            }).length;
            soldElement.textContent = soldCount;
        }
    }
</script>

