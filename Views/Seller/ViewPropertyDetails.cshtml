@model Propertease.Models.PropertyDetailsViewModel

<div class="container mx-auto p-4 max-w-6xl">
    <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <!-- Image Gallery with Main Image and Thumbnails -->
        <div class="p-4">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <!-- Main Large Image -->
                <div class="md:col-span-3 relative">
                    @if (Model.ImageUrl != null && Model.ImageUrl.Any())
                    {
                        <img id="mainImage" src="~/Images/@Model.ImageUrl.First()" alt="@Model.Title" class="w-full h-[400px] object-cover rounded-lg">
                    }
                    else
                    {
                        <div class="w-full h-[400px] bg-gray-300 flex items-center justify-center rounded-lg">
                            <p class="text-gray-500">No image available</p>
                        </div>
                    }

                    <!-- Property Type and Status Badges -->
                    <div class="absolute top-4 left-4 flex flex-wrap gap-2">
                        <span class="px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                            @Model.PropertyType
                        </span>
                        <span class="px-3 py-1 rounded-full text-sm font-medium
                            @(Model.Status == "Pending" ? "bg-yellow-100 text-yellow-800" :
                            Model.Status == "Approved" ? "bg-green-100 text-green-800" :
                            "bg-red-100 text-red-800")">
                            @Model.Status
                        </span>
                    </div>
                </div>

                <!-- Thumbnails and View All Button -->
                <div class="md:col-span-1">
                    <div class="grid grid-cols-2 md:grid-cols-1 gap-2 h-full">
                        @if (Model.ImageUrl != null && Model.ImageUrl.Count > 1)
                        {
                            @foreach (var image in Model.ImageUrl.Skip(1).Take(3))
                            {
                                <div class="aspect-square overflow-hidden rounded-lg cursor-pointer thumbnail-image"
                                     data-image="~/Images/@image">
                                    <img src="~/Images/@image" alt="Property image" class="w-full h-full object-cover hover:opacity-90 transition-opacity">
                                </div>
                            }

                            @if (Model.ImageUrl.Count > 4)
                            {
                                <div class="aspect-square overflow-hidden rounded-lg cursor-pointer bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
                                     id="viewAllImages">
                                    <div class="text-center">
                                        <span class="text-2xl font-bold block">+@(Model.ImageUrl.Count - 4)</span>
                                        <span class="text-sm text-gray-600">View All</span>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="aspect-square bg-gray-200 rounded-lg flex items-center justify-center">
                                <p class="text-gray-500 text-sm">No additional images</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Property Title and Price -->
        <div class="p-6 border-b">
            <div class="flex flex-wrap justify-between items-center">
                <div>
                    <h1 class="text-2xl md:text-3xl font-bold text-gray-800">@Model.Title</h1>
                    <p class="text-gray-600 mt-1">
                        <svg class="w-5 h-5 inline-block mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        @Model.City, @Model.District, @Model.Province
                    </p>
                </div>
                <div>
                    <span class="text-3xl font-bold text-blue-600">₹@Model.Price.ToString("N0")</span>
                </div>
            </div>
        </div>

        <!-- Property Details -->
        <div class="p-6 grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- Left Column - Property Specifications -->
            <div>
                <h2 class="text-2xl font-semibold mb-4">Property Details</h2>

                <!-- Description -->
                <div class="mb-6">
                    <h3 class="text-lg font-medium mb-2">Description</h3>
                    <p class="text-gray-700">@Model.Description</p>
                </div>

                <!-- Property Specifications -->
                <div class="bg-gray-50 p-4 rounded-lg">
                    <h3 class="text-lg font-medium mb-3">Specifications</h3>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <p class="text-gray-500">Property Type</p>
                            <p class="font-medium">@Model.PropertyType</p>
                        </div>
                        <div>
                            <p class="text-gray-500">Road Access</p>
                            <p class="font-medium">@(Model.RoadAccess ?? "N/A")</p>
                        </div>

                        @if (Model.PropertyType == "House")
                        {
                            <div>
                                <p class="text-gray-500">Bedrooms</p>
                                <p class="font-medium">@(Model.Bedrooms ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Bathrooms</p>
                                <p class="font-medium">@(Model.Bathrooms ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Kitchens</p>
                                <p class="font-medium">@(Model.Kitchens ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Sitting Rooms</p>
                                <p class="font-medium">@(Model.SittingRooms ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Floors</p>
                                <p class="font-medium">@(Model.Floors ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Facing Direction</p>
                                <p class="font-medium">@(Model.FacingDirection ?? "N/A")</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Land Area</p>
                                <p class="font-medium">@(Model.LandArea != null ? $"{Model.LandArea} sq.m" : "N/A")</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Buildup Area</p>
                                <p class="font-medium">@(Model.BuildupArea != null ? $"{Model.BuildupArea} sq.m" : "N/A")</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Built Year</p>
                                <p class="font-medium">@(Model.BuiltYear.ToString("yyyy"))</p>
                            </div>
                        }
                        else if (Model.PropertyType == "Apartment")
                        {
                            <div>
                                <p class="text-gray-500">Rooms</p>
                                <p class="font-medium">@(Model.Rooms ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Bathrooms</p>
                                <p class="font-medium">@(Model.Bathrooms ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Kitchens</p>
                                <p class="font-medium">@(Model.Kitchens ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Sitting Rooms</p>
                                <p class="font-medium">@(Model.SittingRooms ?? 0)</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Room Size</p>
                                <p class="font-medium">@(Model.RoomSize != null ? $"{Model.RoomSize} sq.m" : "N/A")</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Built Year</p>
                                <p class="font-medium">@(Model.BuiltYear.ToString("yyyy"))</p>
                            </div>
                        }
                        else if (Model.PropertyType == "Land")
                        {
                            <div>
                                <p class="text-gray-500">Land Area</p>
                                <p class="font-medium">@(Model.LandArea != null ? $"{Model.LandArea} sq.m" : "N/A")</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Land Type</p>
                                <p class="font-medium">@(Model.LandType ?? "N/A")</p>
                            </div>
                            <div>
                                <p class="text-gray-500">Soil Quality</p>
                                <p class="font-medium">@(Model.SoilQuality ?? "N/A")</p>
                            </div>
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.ThreeDModel))
                {
                    <div class="mt-6">
                        <h3 class="text-lg font-medium mb-2">3D Model</h3>
                        <div class="bg-blue-50 p-4 rounded-lg flex items-center">
                            <svg class="w-6 h-6 text-blue-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5"></path>
                            </svg>
                            <a href="/3DModels/@Model.ThreeDModel" class="text-blue-600 hover:underline">View 3D Model</a>
                        </div>
                    </div>
                }
            </div>

            <!-- Right Column - Map and Seller Info -->
            <div>
                <!-- Map View -->
                @if (Model.Latitude != null && Model.Longitude != null)
                {
                    <h2 class="text-2xl font-semibold mb-4">Location</h2>
                    <div id="map" class="h-64 rounded-lg mb-6"></div>
                }

                <!-- Seller Information -->
                <h2 class="text-2xl font-semibold mb-4">Seller Information</h2>
                <div class="bg-gray-50 p-4 rounded-lg flex items-start gap-4">
                    @if (!string.IsNullOrEmpty(Model.SellerImage))
                    {
                        <img src="~/Images/@Model.SellerImage" alt="@Model.SellerName" class="w-16 h-16 rounded-full object-cover" />
                    }
                    else
                    {
                        <div class="w-16 h-16 rounded-full bg-blue-100 flex items-center justify-center text-blue-500">
                            <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                        </div>
                    }
                    <div>
                        <h3 class="font-medium text-lg">@Model.SellerName</h3>
                        <p class="text-gray-600">@Model.SellerContact</p>
                        <button class="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm">
                            Contact Seller
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="p-6 border-t flex flex-wrap gap-4">
            <a href="/Seller/EditProperty/@Model.Id" class="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 inline-flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Edit Property
            </a>
            <form method="post" action="/Seller/Delete/@Model.Id" onsubmit="return confirm('Are you sure you want to delete this property?');">
                <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 inline-flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Delete
                </button>
            </form>
            <a href="/Seller/Listings" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 inline-flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Listings
            </a>
        </div>
    </div>
</div>

<!-- Image Gallery Modal -->
<div id="imageGalleryModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center hidden">
    <div class="relative w-full max-w-4xl p-4">
        <!-- Close Button -->
        <button id="closeGallery" class="absolute top-2 right-2 text-white bg-black bg-opacity-50 rounded-full p-2 hover:bg-opacity-70 z-10">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        </button>

        <!-- Main Image Container -->
        <div class="relative">
            <img id="modalMainImage" src="/placeholder.svg" alt="Property image" class="w-full h-auto max-h-[70vh] object-contain">

            <!-- Navigation Arrows -->
            <button id="prevImage" class="absolute left-2 top-1/2 transform -translate-y-1/2 text-white bg-black bg-opacity-50 rounded-full p-2 hover:bg-opacity-70">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>
            <button id="nextImage" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-white bg-black bg-opacity-50 rounded-full p-2 hover:bg-opacity-70">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>

        <!-- Thumbnails -->
        <div class="mt-4 flex overflow-x-auto space-x-2 pb-2">
            @if (Model.ImageUrl != null && Model.ImageUrl.Any())
            {
                @foreach (var image in Model.ImageUrl)
                {
                    <div class="flex-shrink-0 w-20 h-20 cursor-pointer modal-thumbnail" data-image="~/Images/@image">
                        <img src="~/Images/@image" alt="Thumbnail" class="w-full h-full object-cover rounded">
                    </div>
                }
            }
        </div>
    </div>
</div>

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.css" rel="stylesheet">

    @if (Model.Latitude != null && Model.Longitude != null)
    {
        <script>
            mapboxgl.accessToken = 'pk.eyJ1Ijoia3Jvc3NzdWJhcm5hIiwiYSI6ImNtN3NteGp5ajE2dWgyanNibHNxc2o5YXcifQ.GSxJY20oRcqu6qnF154OEg';

            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [@Model.Longitude, @Model.Latitude],
                zoom: 14
            });

            new mapboxgl.Marker()
                .setLngLat([@Model.Longitude, @Model.Latitude])
                .addTo(map);
        </script>
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Image Gallery Functionality
            const mainImage = document.getElementById('mainImage');
            const thumbnailImages = document.querySelectorAll('.thumbnail-image');
            const viewAllButton = document.getElementById('viewAllImages');
            const imageGalleryModal = document.getElementById('imageGalleryModal');
            const closeGallery = document.getElementById('closeGallery');
            const modalMainImage = document.getElementById('modalMainImage');
            const modalThumbnails = document.querySelectorAll('.modal-thumbnail');
            const prevButton = document.getElementById('prevImage');
            const nextButton = document.getElementById('nextImage');

            // Store all image paths
            const allImages = @Html.Raw(Json.Serialize(Model.ImageUrl?.Select(img => $"~/Images/{img}").ToList() ?? new List<string>()));
            let currentImageIndex = 0;

            // Change main image when thumbnail is clicked
            thumbnailImages.forEach(thumbnail => {
                thumbnail.addEventListener('click', function() {
                    const imagePath = this.getAttribute('data-image');
                    mainImage.src = imagePath;
                });
            });

            // Open gallery modal when "View All" is clicked
            if (viewAllButton) {
                viewAllButton.addEventListener('click', function() {
                    openGalleryModal();
                });
            }

            // Close gallery modal
            closeGallery.addEventListener('click', function() {
                imageGalleryModal.classList.add('hidden');
            });

            // Change modal image when thumbnail is clicked
            modalThumbnails.forEach((thumbnail, index) => {
                thumbnail.addEventListener('click', function() {
                    const imagePath = this.getAttribute('data-image');
                    modalMainImage.src = imagePath;
                    currentImageIndex = index;
                });
            });

            // Navigate to previous image
            prevButton.addEventListener('click', function() {
                currentImageIndex = (currentImageIndex - 1 + allImages.length) % allImages.length;
                modalMainImage.src = allImages[currentImageIndex];
            });

            // Navigate to next image
            nextButton.addEventListener('click', function() {
                currentImageIndex = (currentImageIndex + 1) % allImages.length;
                modalMainImage.src = allImages[currentImageIndex];
            });

            // Open gallery modal and set initial image
            function openGalleryModal() {
                if (allImages.length > 0) {
                    modalMainImage.src = allImages[0];
                    currentImageIndex = 0;
                    imageGalleryModal.classList.remove('hidden');
                }
            }

            // Keyboard navigation
            document.addEventListener('keydown', function(e) {
                if (imageGalleryModal.classList.contains('hidden')) return;

                if (e.key === 'ArrowLeft') {
                    prevButton.click();
                } else if (e.key === 'ArrowRight') {
                    nextButton.click();
                } else if (e.key === 'Escape') {
                    closeGallery.click();
                }
            });
        });
    </script>


