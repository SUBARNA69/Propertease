@model Propertease.Models.PropertyDetailsViewModel

@{
    ViewData["Title"] = "Property Details";
}

<div class="max-w-6xl mx-auto py-8 px-4">
    <!-- Property Image Section -->
    <div class="relative bg-gray-200 h-64 flex items-center justify-center mb-6 rounded-lg overflow-hidden">
        <!-- Main Image -->
        @if (Model.ImageUrl != null && Model.ImageUrl.Any())
        {
            <img id="mainImage" src="~/Images/@Model.ImageUrl.First()" alt="Property Image" class="h-full w-full object-cover" />
        }
        else
        {
            <span class="text-gray-500">No Image Available</span>
        }

        <!-- Plus Button for Gallery -->
        @if (Model.ImageUrl != null && Model.ImageUrl.Count > 1)
        {
            <button id="openGallery" class="absolute bottom-4 right-4 bg-white p-2 rounded-full shadow-lg hover:bg-gray-100">
                <span class="text-gray-700">+@(Model.ImageUrl.Count - 1)</span>
            </button>
        }
    </div>

    <!-- Main Details Section -->
    <div class="grid grid-cols-3 gap-6">
        <!-- Property Details Card -->
        <div class="col-span-2 bg-white p-6 shadow-md rounded-lg">
            <div class="flex justify-between items-center mb-4">
                <div>
                    <h2 class="text-2xl font-bold mb-2">@Model.Title</h2>
                    <p class="text-xl text-gray-600 font-semibold">$@string.Format("{0:n0}", Model.Price)</p>
                </div>
                <div class="bg-gray-100 px-3 py-1 rounded-full">
                    <span class="font-medium">Status: <span class="@(Model.Status == "Approved" ? "text-green-600" : (Model.Status == "Rejected" ? "text-red-600" : "text-yellow-600"))">@Model.Status</span></span>
                </div>
            </div>

            <p class="text-gray-700 mb-6">@Model.Description</p>

            <div class="grid grid-cols-2 gap-4 mb-6">
                @if (Model.PropertyType == "House")
                {
                    <div class="col-span-2 mb-2">
                        <h3 class="text-lg font-semibold border-b pb-2 mb-2">House Details</h3>
                    </div>
                    <p><strong>Bedrooms:</strong> @Model.Bedrooms</p>
                    <p><strong>Bathrooms:</strong> @Model.Bathrooms</p>
                    <p><strong>Kitchens:</strong> @Model.Kitchens</p>
                    <p><strong>Sitting Rooms:</strong> @Model.SittingRooms</p>
                    <p><strong>Floors:</strong> @Model.Floors</p>
                    <p><strong>Land Area:</strong> @Model.LandArea sq ft</p>
                    <p><strong>Buildup Area:</strong> @Model.BuildupArea sq ft</p>
                    <p><strong>Built Year:</strong> @Model.BuiltYear.ToString("yyyy")</p>
                    <p><strong>Facing Direction:</strong> @Model.FacingDirection</p>
                }
                else if (Model.PropertyType == "Apartment")
                {
                    <div class="col-span-2 mb-2">
                        <h3 class="text-lg font-semibold border-b pb-2 mb-2">Apartment Details</h3>
                    </div>
                    <p><strong>Rooms:</strong> @Model.Rooms</p>
                    <p><strong>Bathrooms:</strong> @Model.Bathrooms</p>
                    <p><strong>Kitchens:</strong> @Model.Kitchens</p>
                    <p><strong>Sitting Rooms:</strong> @Model.SittingRooms</p>
                    <p><strong>Room Size:</strong> @Model.RoomSize sq ft</p>
                    <p><strong>Built Year:</strong> @Model.BuiltYear.ToString("yyyy")</p>
                }
                else if (Model.PropertyType == "Land")
                {
                    <div class="col-span-2 mb-2">
                        <h3 class="text-lg font-semibold border-b pb-2 mb-2">Land Details</h3>
                    </div>
                    <p><strong>Land Area:</strong> @Model.LandArea sq ft</p>
                    <p><strong>Land Type:</strong> @Model.LandType</p>
                    <p><strong>Soil Quality:</strong> @Model.SoilQuality</p>
                }
            </div>

            <div class="border-t pt-4 mt-4">
                <h3 class="text-lg font-semibold mb-3">Location Information</h3>
                <div class="grid grid-cols-2 gap-4">
                    <p><strong>Province:</strong> @Model.Province</p>
                    <p><strong>District:</strong> @Model.District</p>
                    <p><strong>City:</strong> @Model.City</p>
                    <p><strong>Road Access:</strong> @Model.RoadAccess</p>
                    @if (Model.Latitude.HasValue && Model.Longitude.HasValue)
                    {
                        <p><strong>Coordinates:</strong> @Model.Latitude, @Model.Longitude</p>
                    }
                </div>
            </div>

            <div class="border-t pt-4 mt-4">
                <h3 class="text-lg font-semibold mb-3">Property Information</h3>
                <div class="grid grid-cols-2 gap-4">
                    <p><strong>Property Type:</strong> @Model.PropertyType</p>
                    <p><strong>Created At:</strong> @Model.CreatedAt</p>
                    @if (Model.ThreeDModel != null)
                    {
                        <p class="col-span-2"><strong>3D Model:</strong> <a href="~/3DModels/@Model.ThreeDModel" class="text-blue-500 hover:underline" target="_blank">View 3D Model</a></p>
                    }
                </div>
            </div>
        </div>

        <!-- Seller Information Card -->
        <div class="bg-white p-6 shadow-md rounded-lg">
            <h3 class="text-xl font-bold mb-4 border-b pb-2">Seller Information</h3>
            <div class="space-y-3">
                <p><strong>Name:</strong> @Model.SellerName</p>
                <p><strong>Contact:</strong> @Model.SellerContact</p>
                <p><strong>Email:</strong> @Model.SellerEmail</p>
                @if (!string.IsNullOrEmpty(Model.SellerAddress))
                {
                    <p><strong>Address:</strong> @Model.SellerAddress</p>
                }
            </div>

            <div class="mt-6 pt-4 border-t">
                <h4 class="font-semibold mb-2">Admin Actions</h4>
                <div class="flex flex-col space-y-2">
                    <form asp-action="ApproveProperty" asp-controller="Admin" method="post">
                        <input type="hidden" name="id" value="@Model.Id" />
                        <button type="submit" class="w-full bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition">
                            Approve Property
                        </button>
                    </form>

                    <button id="openRejectModal" class="w-full bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded transition">
                        Reject Property
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Back to Properties -->
    <div class="mt-6 text-center">
        <a href="@Url.Action("AdminRequests", "Admin")" class="text-blue-500 hover:underline">&larr; Back to Properties</a>
    </div>
</div>

<!-- Image Gallery Modal -->
<div id="galleryModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center p-4 z-50">
    <div class="bg-white rounded-lg p-6 max-w-4xl w-full relative">
        <!-- Close Button -->
        <button id="closeGallery" class="absolute top-4 right-4 text-gray-700 hover:text-gray-900 text-2xl font-bold">
            &times;
        </button>

        <!-- Gallery Content -->
        <div class="flex items-center justify-between">
            <!-- Previous Button -->
            <button id="prevImage" class="bg-gray-200 p-2 rounded-full hover:bg-gray-300">
                &larr;
            </button>

            <!-- Current Image -->
            <img id="modalImage" src="/placeholder.svg" alt="Gallery Image" class="max-h-[70vh] w-auto object-cover" />

            <!-- Next Button -->
            <button id="nextImage" class="bg-gray-200 p-2 rounded-full hover:bg-gray-300">
                &rarr;
            </button>
        </div>

        <!-- Thumbnails -->
        <div class="flex overflow-x-auto mt-4 space-x-2">
            @if (Model.ImageUrl != null)
            {
                foreach (var imageUrl in Model.ImageUrl)
                {
                    <img src="~/Images/@imageUrl" alt="Thumbnail" class="w-16 h-16 object-cover cursor-pointer hover:opacity-75" onclick="changeModalImage('@imageUrl')" />
                }
            }
        </div>
    </div>
</div>

<!-- Reject Modal -->
<div id="rejectModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center p-4 z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 class="text-xl font-bold mb-4">Reject Property</h3>
        <form action="/Admin/RejectProperty" method="post">
            <input type="hidden" name="id" value="@Model.Id" />

            <div class="mb-4">
                <label for="reason" class="block text-sm font-medium text-gray-700 mb-1">Reason for Rejection</label>
                <textarea id="reason" name="reason" rows="4" class="w-full border rounded-md p-2" placeholder="Please provide a reason for rejecting this property..."></textarea>
            </div>

            <div class="flex justify-end space-x-3">
                <button type="button" id="cancelReject" class="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300">Cancel</button>
                <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">Reject</button>
            </div>
        </form>
    </div>
</div>

<!-- JavaScript for Gallery and Modal Functionality -->
<script>
    // Gallery Modal
    document.getElementById('openGallery')?.addEventListener('click', () => {
        document.getElementById('galleryModal').classList.remove('hidden');
        document.getElementById('galleryModal').classList.add('flex');
        changeModalImage('@(Model.ImageUrl != null && Model.ImageUrl.Any() ? Model.ImageUrl.First() : "")'); // Set the first image as default
    });

    document.getElementById('closeGallery')?.addEventListener('click', () => {
        document.getElementById('galleryModal').classList.add('hidden');
        document.getElementById('galleryModal').classList.remove('flex');
    });

    // Reject Modal
    document.getElementById('openRejectModal')?.addEventListener('click', () => {
        document.getElementById('rejectModal').classList.remove('hidden');
        document.getElementById('rejectModal').classList.add('flex');
    });

    document.getElementById('cancelReject')?.addEventListener('click', () => {
        document.getElementById('rejectModal').classList.add('hidden');
        document.getElementById('rejectModal').classList.remove('flex');
    });

    // Change Modal Image
    function changeModalImage(imageUrl) {
        document.getElementById('modalImage').src = `/Images/${imageUrl}`;
    }

    // Next and Previous Buttons
    let currentIndex = 0;
    const images = @Html.Raw(Json.Serialize(Model.ImageUrl));

    document.getElementById('nextImage')?.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % images.length;
        changeModalImage(images[currentIndex]);
    });

    document.getElementById('prevImage')?.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        changeModalImage(images[currentIndex]);
    });

    // Close modals when clicking outside
    window.addEventListener('click', (e) => {
        const galleryModal = document.getElementById('galleryModal');
        const rejectModal = document.getElementById('rejectModal');

        if (e.target === galleryModal) {
            galleryModal.classList.add('hidden');
            galleryModal.classList.remove('flex');
        }

        if (e.target === rejectModal) {
            rejectModal.classList.add('hidden');
            rejectModal.classList.remove('flex');
        }
    });
</script>