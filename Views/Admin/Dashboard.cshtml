@{
    ViewData["Title"] = "Dashboard";
}

<!-- Include Flowbite CSS and JS in your _Layout.cshtml or add here -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.css" rel="stylesheet" />

<div class="p-4 sm:ml-64">
    <div class="p-4 border-gray-200 rounded-lg">
        <!-- Header -->
        <div class="mb-6">
            <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Welcome back, Admin!</h1>
            <p class="text-gray-500 dark:text-gray-400">Here's what's happening with your platform today.</p>
        </div>

        <!-- Stats Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
            <!-- Total Users -->
            <a href="@Url.Action("UsersManagement", "Admin")" class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <span class="text-2xl sm:text-3xl leading-none font-bold text-gray-900 dark:text-white">@ViewBag.TotalUsers</span>
                        <h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Total Users</h3>
                    </div>
                    <div class="ml-5 w-0 flex items-center justify-end flex-1 text-green-500 text-base font-bold">
                        +12%
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </a>

            <!-- Active Properties -->
            <a href="@Url.Action("AllProperties", "Admin")" class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <span class="text-2xl sm:text-3xl leading-none font-bold text-gray-900 dark:text-white">@ViewBag.ActiveProperties</span>
                        <h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Active Properties</h3>
                    </div>
                    <div class="ml-5 w-0 flex items-center justify-end flex-1 text-green-500 text-base font-bold">
                        +8%
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M5.293 7.707a1 1 0 010-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 01-1.414 1.414L11 5.414V17a1 1 0 11-2 0V5.414L6.707 7.707a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    </div>
                </div>
            </a>

            <!-- Pending Approvals -->
            <a href="@Url.Action("AdminRequests", "Admin")" class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <span class="text-2xl sm:text-3xl leading-none font-bold text-gray-900 dark:text-white">@ViewBag.PendingApprovals</span>
                        <h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Pending Approvals</h3>
                    </div>
                    <div class="ml-5 w-0 flex items-center justify-end flex-1 text-gray-500 text-base font-bold">
                        23 new today
                    </div>
                </div>
            </a>

            <!-- Total Earnings -->
            <a href="@Url.Action("BoostEarnings", "Admin")" class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <span class="text-2xl sm:text-3xl leading-none font-bold text-gray-900 dark:text-white">Rs. @ViewBag.TotalEarnings.ToString("N0")</span>
                        <h3 class="text-base font-normal text-gray-500 dark:text-gray-400">Total Earnings</h3>
                    </div>
                    <div class="ml-5 w-0 flex items-center justify-end flex-1 text-green-500 text-base font-bold">
                        <div class="p-2 rounded-full bg-green-100">
                            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                    </div>
                </div>
            </a>
        </div>

        <!-- Charts Grid - 2x2 layout -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <!-- Monthly User Registrations (Bar Chart) -->
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-shadow duration-300">
                <div class="mb-4 flex items-center justify-between">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900 dark:text-white">Monthly User Registrations</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Buyers vs Sellers</p>
                    </div>
                </div>
                <div class="h-72">
                    <canvas id="userRegistrationsChart"></canvas>
                </div>
            </div>

            <!-- Monthly Property Listings (Bar Chart) -->
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-shadow duration-300">
                <div class="mb-4 flex items-center justify-between">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900 dark:text-white">Monthly Property Listings</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Approved vs Pending</p>
                    </div>
                </div>
                <div class="h-72">
                    <canvas id="propertyListingsChart"></canvas>
                </div>
            </div>

            <!-- Monthly Earnings Line Chart -->
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-shadow duration-300">
                <div class="mb-4 flex items-center justify-between">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900 dark:text-white">Monthly Earnings</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Revenue from property boosts</p>
                    </div>
                </div>
                <div class="h-72">
                    <canvas id="monthlyEarningsChart"></canvas>
                </div>
            </div>

            <!-- Property Growth Line Chart -->
            <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-shadow duration-300">
                <div class="mb-4 flex items-center justify-between">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900 dark:text-white">Property Growth</h3>
                        <p class="text-sm text-gray-500 dark:text-gray-400">Total properties over time</p>
                    </div>
                </div>
                <div class="h-72">
                    <canvas id="propertyGrowthChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Recent Activity Section -->
        <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 sm:p-6 xl:p-8 hover:shadow-lg transition-shadow duration-300">
            <div class="mb-4">
                <h3 class="text-xl font-bold text-gray-900 dark:text-white">Recent Activity</h3>
            </div>
            <div>
                <div class="flow-root">
                    <ul role="list" class="divide-y divide-gray-200 dark:divide-gray-700">
                        @if (ViewBag.RecentApprovedProperties != null && ViewBag.RecentApprovedProperties.Count > 0)
                        {
                            @foreach (var property in ViewBag.RecentApprovedProperties)
                            {
                                <li class="py-3 sm:py-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 rounded-lg px-2">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex-shrink-0">
                                            <div class="w-8 h-8 rounded-full bg-green-200 flex items-center justify-center">
                                                <svg class="w-4 h-4 text-green-600" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
                                                </svg>
                                            </div>
                                        </div>
                                        <div class="flex-1 min-w-0">
                                            <p class="text-sm font-medium text-gray-900 truncate dark:text-white">
                                                New Property Listed
                                            </p>
                                            <p class="text-sm text-gray-500 truncate dark:text-gray-400">
                                                @property.Title in @property.Location - Rs. @property.Price.ToString("N0")
                                            </p>
                                        </div>
                                        <div class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white">
                                            @{
                                                var timeAgo = DateTime.Now - property.ApprovedDate;
                                                string timeDisplay;

                                                if (timeAgo.TotalMinutes < 60)
                                                    timeDisplay = $"{Math.Floor(timeAgo.TotalMinutes)} minutes ago";
                                                else if (timeAgo.TotalHours < 24)
                                                    timeDisplay = $"{Math.Floor(timeAgo.TotalHours)} hours ago";
                                                else
                                                    timeDisplay = $"{Math.Floor(timeAgo.TotalDays)} days ago";
                                            }
                                            @timeDisplay
                                        </div>
                                    </div>
                                </li>
                            }
                        }
                        else
                        {
                            <li class="py-3 sm:py-4">
                                <div class="flex items-center">
                                    <p class="text-sm text-gray-500 dark:text-gray-400">No recent activity</p>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Include Flowbite JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.2.0/flowbite.min.js"></script>

<script>
    // Parse the JSON data from ViewBag
    const monthlyUserRegistrations = @Html.Raw(ViewBag.MonthlyUserRegistrations);
    const monthlyPropertyListings = @Html.Raw(ViewBag.MonthlyPropertyListings);
    const propertyGrowthData = @Html.Raw(ViewBag.PropertyGrowthData);
    const monthlyEarnings = @Html.Raw(ViewBag.MonthlyEarnings);

    // Extract data for charts
    const months = monthlyUserRegistrations.map(item => item.month);
    const buyerCounts = monthlyUserRegistrations.map(item => item.buyers);
    const sellerCounts = monthlyUserRegistrations.map(item => item.sellers);

    const approvedCounts = monthlyPropertyListings.map(item => item.approved);
    const pendingCounts = monthlyPropertyListings.map(item => item.pending);

    // Extract data for the line chart
    const growthMonths = propertyGrowthData.map(item => item.month);
    const propertyTotals = propertyGrowthData.map(item => item.total);

    // Extract data for the earnings chart
    const earningsMonths = monthlyEarnings.map(item => item.month);
    const earningsValues = monthlyEarnings.map(item => item.earnings);

    // Set up color scheme
    const colors = {
        blue: {
            primary: '#1A56DB',
            light: 'rgba(26, 86, 219, 0.1)'
        },
        green: {
            primary: '#16BDCA',
            light: 'rgba(22, 189, 202, 0.1)'
        },
        orange: {
            primary: '#F59E0B',
            light: 'rgba(245, 158, 11, 0.1)'
        },
        red: {
            primary: '#EF4444',
            light: 'rgba(239, 68, 68, 0.1)'
        },
        purple: {
            primary: '#8B5CF6',
            light: 'rgba(139, 92, 246, 0.1)'
        },
        teal: {
            primary: '#14B8A6',
            light: 'rgba(20, 184, 166, 0.1)'
        }
    };

    // Monthly User Registrations Chart
    const userRegistrationsCtx = document.getElementById('userRegistrationsChart').getContext('2d');
    new Chart(userRegistrationsCtx, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [
                {
                    label: 'Buyers',
                    data: buyerCounts,
                    backgroundColor: colors.blue.primary,
                    borderColor: colors.blue.primary,
                    borderWidth: 1
                },
                {
                    label: 'Sellers',
                    data: sellerCounts,
                    backgroundColor: colors.green.primary,
                    borderColor: colors.green.primary,
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        display: true,
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        display: false,
                        drawBorder: false
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                }
            }
        }
    });

    // Monthly Property Listings Chart
    const propertyListingsCtx = document.getElementById('propertyListingsChart').getContext('2d');
    new Chart(propertyListingsCtx, {
        type: 'bar',
        data: {
            labels: months,
            datasets: [
                {
                    label: 'Approved',
                    data: approvedCounts,
                    backgroundColor: colors.green.primary,
                    borderColor: colors.green.primary,
                    borderWidth: 1
                },
                {
                    label: 'Pending',
                    data: pendingCounts,
                    backgroundColor: colors.orange.primary,
                    borderColor: colors.orange.primary,
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        display: true,
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        display: false,
                        drawBorder: false
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                }
            }
        }
    });

    // Property Growth Line Chart
    const propertyGrowthCtx = document.getElementById('propertyGrowthChart').getContext('2d');
    new Chart(propertyGrowthCtx, {
        type: 'line',
        data: {
            labels: growthMonths,
            datasets: [
                {
                    label: 'Total Properties',
                    data: propertyTotals,
                    backgroundColor: colors.purple.light,
                    borderColor: colors.purple.primary,
                    borderWidth: 2,
                    pointBackgroundColor: colors.purple.primary,
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: colors.purple.primary,
                    tension: 0.3,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        display: true,
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        display: false,
                        drawBorder: false
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                }
            }
        }
    });

    // Monthly Earnings Line Chart
    const monthlyEarningsCtx = document.getElementById('monthlyEarningsChart').getContext('2d');
    new Chart(monthlyEarningsCtx, {
        type: 'line',
        data: {
            labels: earningsMonths,
            datasets: [
                {
                    label: 'Earnings (Rs.)',
                    data: earningsValues,
                    backgroundColor: colors.teal.light,
                    borderColor: colors.teal.primary,
                    borderWidth: 2,
                    pointBackgroundColor: colors.teal.primary,
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: colors.teal.primary,
                    tension: 0.4,
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        display: true,
                        drawBorder: false
                    },
                    ticks: {
                        // Include Rs. prefix in the ticks
                        callback: function(value) {
                            return 'Rs. ' + value.toLocaleString();
                        }
                    }
                },
                x: {
                    grid: {
                        display: false,
                        drawBorder: false
                    }
                }
            },
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return 'Rs. ' + context.raw.toLocaleString();
                        }
                    }
                }
            }
        }
    });
</script>