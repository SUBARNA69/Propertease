@model Propertease.Models.ForumViewModel
@{
    Layout = "_Layout";
    ViewData["Title"] = "Forum";
}

<!-- Toast Container - Fixed position at the top right -->
<div id="toastContainer" class="fixed top-4 right-4 z-50 flex flex-col gap-2"></div>

<div class="max-w-4xl mx-auto p-4 ">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Left side: Create post form -->
        <div class="md:col-span-1">
            <div class="bg-white shadow rounded-lg p-4">
                <h1 class="text-2xl font-bold mb-6">Create a New Post</h1>
                <form id="createPostForm" asp-action="Forum" method="post" enctype="multipart/form-data" class="space-y-4">
                    <!-- Display validation summary -->
                    <div asp-validation-summary="ModelOnly" class="text-red-500"></div>

                    <!-- Title Input -->
                    <div>
                        <label asp-for="ForumPost.Title" class="block text-sm font-medium text-gray-700">Title</label>
                        <input asp-for="ForumPost.Title" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter title" />
                        <span asp-validation-for="ForumPost.Title" class="text-red-500 text-sm"></span>
                    </div>

                    <!-- Content Textarea -->
                    <div>
                        <label asp-for="ForumPost.Content" class="block text-sm font-medium text-gray-700">Content</label>
                        <textarea asp-for="ForumPost.Content" rows="4" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter your content"></textarea>
                        <span asp-validation-for="ForumPost.Content" class="text-red-500 text-sm"></span>
                    </div>

                    <!-- Audio Recording Section -->
                    <div class="mt-4">
                        <label class="block text-sm font-medium text-gray-700">Record Audio</label>
                        <div class="flex items-center space-x-2">
                            <button type="button" id="startRecording" class="bg-green-500 text-white px-4 py-2 rounded shadow">🎤 Record</button>
                            <button type="button" id="stopRecording" class="bg-red-500 text-white px-4 py-2 rounded shadow hidden">⏹ Stop</button>
                        </div>
                        <div id="recordingStatus" class="mt-2 text-sm hidden">Recording...</div>
                        <audio id="audioPlayback" class="hidden mt-2" controls></audio>
                        <!-- This hidden input will store the Base64 string of the recorded audio -->
                        <input type="hidden" asp-for="ForumPost.AudioFile" id="audioData" />
                    </div>

                    <!-- Submit Button -->
                    <div>
                        <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            Create Post
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Right side: Posts display -->
        <div class="md:col-span-2">
            <h2 class="text-2xl font-bold mb-4">Posts</h2>
            <div class="posts-container space-y-4">
                @if (Model.Posts != null && Model.Posts.Any())
                {
                    @foreach (var post in Model.Posts)
                    {
                        <div class="bg-white shadow rounded-lg p-4">
                            <!-- Post header -->
                            <div class="flex justify-between items-start">
                                <h3 class="text-xl font-semibold">
                                    <strong>@(post.User?.FullName ?? "Unknown")</strong>
                                </h3>
                                <span class="text-sm text-gray-500">@post.CreatedAt.ToString("MMM dd, yyyy")</span>
                            </div>
                            <!-- Post content -->
                            <div class="text-sm text-gray-600">Title: @post.Title</div>
                            <p class="text-gray-700 mt-2">@post.Content</p>

                            <!-- Audio Playback (if audio exists) -->
                            @if (!string.IsNullOrEmpty(post.AudioFile))
                            {
                                <div class="mt-2">
                                    <audio controls class="w-full">
                                        <source src="@Url.Content($"~/uploads/{post.AudioFile}")" type="audio/wav">
                                        Your browser does not support the audio element.
                                    </audio>
                                </div>
                            }

                            <!-- Button to toggle comments -->
                            <div class="mt-4 flex justify-between items-center">
                                <button onclick="toggleComments('@post.Id')" class="text-sm text-indigo-600 hover:text-indigo-500">
                                    Show/Hide Comments (@post.Comments?.Count ?? 0)
                                </button>
                            </div>

                            <!-- Comments Section -->
                            <div id="comments-@post.Id" class="mt-4 border-t pt-4 hidden">
                                <h4 class="text-lg font-semibold mb-2">Comments</h4>
                                <!-- Display existing comments -->
                                @if (post.Comments != null && post.Comments.Any())
                                {
                                    foreach (var comment in post.Comments)
                                    {
                                        <div class="bg-gray-50 p-3 rounded mb-2">
                                            <div class="flex justify-between">
                                                <span class="font-medium">@(comment.User?.FullName ?? "Unknown")</span>
                                                <span class="text-sm text-gray-500">@comment.CreatedAt.ToString("MMM dd, yyyy HH:mm")</span>
                                            </div>
                                            <p class="text-gray-700 mt-1">@comment.Content</p>
                                        </div>
                                    }
                                }
                                <!-- Comment Form -->
                                <form class="comment-form mt-4" data-post-id="@post.Id" asp-action="AddForumComment" method="post">
                                    <input type="hidden" name="postId" value="@post.Id" />
                                    <div class="flex gap-2">
                                        <input type="text"
                                               name="content"
                                               class="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                                               placeholder="Write a comment..."
                                               required />
                                        <button type="submit"
                                                class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                                            Comment
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="bg-white shadow rounded-lg p-6 text-center">
                        <p class="text-gray-500">No posts yet. Be the first to add a post!</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    function showToast(message, type = 'success', duration = 3000) {
        const toast = document.createElement('div');
        toast.className = `animate-fade-in max-w-sm p-4 rounded shadow-lg text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
        toast.innerHTML = `
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <span class="font-medium">${message}</span>
                </div>
                <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
                    &times;
                </button>
            </div>
        `;

        // Add to container
        const container = document.getElementById('toastContainer');
        container.appendChild(toast);

        // Auto-remove after duration
        setTimeout(() => {
            toast.classList.add('animate-fade-out');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.remove();
                }
            }, 300); // Match to animation duration
        }, duration);
    }

    // Add necessary CSS animations
    document.head.insertAdjacentHTML('beforeend', `
        <style>
            .animate-fade-in {
                animation: fadeIn 0.3s ease-in-out;
            }
            .animate-fade-out {
                animation: fadeOut 0.3s ease-in-out;
            }
    @@keyframes fadeIn {
                from { opacity: 0; transform: translateY(-20px); }
                to { opacity: 1; transform: translateY(0); }
            }
    @@keyframes fadeOut {
                from { opacity: 1; transform: translateY(0); }
                to { opacity: 0; transform: translateY(-20px); }
            }
        </style>
    `);

    // Check for success message in TempData/ViewData
    document.addEventListener('DOMContentLoaded', function() {
        // Check if we're redirected after post creation (check URL parameters)
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('postCreated')) {
            showToast('Your post has been created successfully!', 'success');
        }

        // Attach event listener to the post form submission
        const postForm = document.getElementById('createPostForm');
        if (postForm) {
            postForm.addEventListener('submit', function(e) {
                // Client-side validation here if needed
                const titleInput = document.querySelector('[name="ForumPost.Title"]');
                const contentInput = document.querySelector('[name="ForumPost.Content"]');

                if (titleInput.value.trim() === '' || contentInput.value.trim() === '') {
                    e.preventDefault();
                    showToast('Please fill in all required fields', 'error');
                    return false;
                }
            });
        }

        // Attach event listeners to all comment forms
        const commentForms = document.querySelectorAll('.comment-form');
        commentForms.forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const postId = this.getAttribute('data-post-id');
                const contentInput = this.querySelector('input[name="content"]');

                if (contentInput.value.trim() === '') {
                    showToast('Comment cannot be empty', 'error');
                    return false;
                }

                // Submit the form via AJAX
                const formData = new FormData(this);

                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        // Clear the comment input
                        contentInput.value = '';
                        showToast('Comment added successfully!', 'success');

                        // Optionally reload the comments section
                        // This would require a partial view or API endpoint to get just the comments
                        // For now, we can reload the page after a short delay
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    } else {
                        showToast('Failed to add comment. Please try again.', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while adding your comment', 'error');
                });
            });
        });
    });

    // Toggle comments visibility
    function toggleComments(postId) {
        const commentsContainer = document.getElementById(`comments-${postId}`);
        if (commentsContainer) {
            commentsContainer.classList.toggle('hidden');
        }
    }

    // Audio recording logic
    let mediaRecorder;
    let audioChunks = [];

    document.getElementById("startRecording").addEventListener("click", async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();

            document.getElementById("startRecording").classList.add("hidden");
            document.getElementById("stopRecording").classList.remove("hidden");
            document.getElementById("recordingStatus").classList.remove("hidden");

            audioChunks = []; // Clear any previous recording chunks

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
                const audioBlob = new Blob(audioChunks, { type: "audio/wav" });
                const audioURL = URL.createObjectURL(audioBlob);
                const audioPlayback = document.getElementById("audioPlayback");
                audioPlayback.src = audioURL;
                audioPlayback.classList.remove("hidden");
                document.getElementById("recordingStatus").classList.add("hidden");

                // Convert to base64 and store in hidden input
                const reader = new FileReader();
                reader.readAsDataURL(audioBlob);
                reader.onloadend = () => {
                    const base64data = reader.result;
                    document.getElementById("audioData").value = base64data;
                    console.log("Audio data captured and stored in form");

                    // Show a toast notification that audio is ready
                    showToast('Audio recording captured successfully!', 'success');
                };
            };
        } catch (err) {
            console.error("Error accessing microphone:", err);
            showToast('Could not access microphone. Please check your browser permissions.', 'error');
            document.getElementById("startRecording").classList.remove("hidden");
            document.getElementById("stopRecording").classList.add("hidden");
        }
    });

    document.getElementById("stopRecording").addEventListener("click", () => {
        if (mediaRecorder && mediaRecorder.state !== "inactive") {
            mediaRecorder.stop();
            document.getElementById("stopRecording").classList.add("hidden");
            document.getElementById("startRecording").classList.remove("hidden");
        }
    });
</script>