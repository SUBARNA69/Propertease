@model IEnumerable<Properties>

@{
    ViewData["Title"] = "Apartments & Flats";
}

<!-- Add Flowbite CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.css" rel="stylesheet">
<!-- Add Font Awesome for additional icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<!-- Add noUiSlider for range slider -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nouislider@15.6.1/dist/nouislider.min.css">
<!-- Add custom CSS -->
<link rel="stylesheet" href="~/css/apartments.css">


<!-- Hero Section -->
<section  class="relative hero-gradient pt-16 pb-16 mt-14 overflow-hidden">
    
    <div class="max-w-screen-xl mx-auto px-4 relative z-10">
        <div class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-extrabold mb-4 text-gray-900 leading-tight">Apartments & Flats</h1>
            <p class="text-xl text-gray-600 max-w-3xl mx-auto">Discover modern living spaces with premium amenities in prime urban locations</p>
        </div>
    </div>
</section>



<!-- Properties Grid -->
<section class="py-12 bg-gray-50">
    <div class="max-w-screen-xl mx-auto px-4">
        <div id="propertiesContainer" class="grid md:grid-cols-3 gap-8">
            @foreach (var property in Model)
            {
                <div class="property-card"
                     data-price="@property.Price"
                     data-location="@property.City"
                     data-bedrooms="2"
                     data-floor="3">
                    <div class="image-container">
                        @if (property.PropertyImages != null && property.PropertyImages.Any())
                        {
                            <img src="~/Images/@property.PropertyImages.First().Photo" alt="@property.Title" class="image-hover">
                        }
                        else
                        {
                            <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                                <span class="text-gray-500">No Image Available</span>
                            </div>
                        }
                        @if (property.CreatedAt.HasValue && (DateTime.Now - property.CreatedAt.Value).TotalDays < 7)
                        {
                            <div class="badge badge-new">
                                <i class="fa-solid fa-bolt"></i> New
                            </div>
                        }
                        <div class="badge badge-photos">
                            <i class="fa-solid fa-camera mr-1"></i> @(property.PropertyImages?.Count() ?? 0) Photos
                        </div>
                    </div>

                    <div class="property-info">
                        <div class="flex items-center mb-3">
                            <span class="badge badge-property-type">@property.PropertyType</span>
                            <span class="badge badge-status">For Sale</span>
                        </div>

                        <h3 class="property-title">@property.Title</h3>

                        <div class="property-location">
                            <i class="fa-solid fa-location-dot"></i>
                            <span>@property.District, @property.City</span>
                        </div>

                        <div class="property-features">
                            <div class="property-feature">
                                <i class="fa-solid fa-bed"></i>
                                <span>2 Beds</span>
                            </div>
                            <div class="property-feature">
                                <i class="fa-solid fa-bath"></i>
                                <span>1 Bath</span>
                            </div>
                            <div class="property-feature">
                                <i class="fa-solid fa-ruler-combined"></i>
                                <span>950 sq.ft</span>
                            </div>
                        </div>

                        <!-- Apartment-specific features -->
                        <div class="floor-info">
                            <i class="fa-solid fa-building"></i>
                            <span>3rd Floor</span>
                            <span class="badge badge-floor ml-2">Elevator</span>
                        </div>

                        <div class="amenities-list">
                            <span class="amenity-tag"><i class="fa-solid fa-car"></i> Parking</span>
                            <span class="amenity-tag"><i class="fa-solid fa-dumbbell"></i> Gym</span>
                            <span class="amenity-tag"><i class="fa-solid fa-shield-halved"></i> Security</span>
                            <span class="amenity-tag"><i class="fa-solid fa-water-ladder"></i> Swimming Pool</span>
                        </div>

                        <div class="property-footer">
                            <span class="property-price">Rs. @property.Price.ToString("N0")</span>
                            <a href="@Url.Action("Details", "Home", new { id = property.Id })" class="btn-view-details">
                                View Details <i class="fa-solid fa-arrow-right"></i>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Empty State (Hidden by default) -->
        <div id="emptyState" class="empty-state hidden">
            <div class="empty-state-icon">
                <i class="fa-solid fa-building-circle-xmark"></i>
            </div>
            <h3 class="empty-state-title">No apartments found</h3>
            <p class="empty-state-text">Try adjusting your filters to find apartments that match your criteria.</p>
            <button id="clearFilters" class="btn-filter">
                <i class="fa-solid fa-filter-circle-xmark mr-2"></i> Clear All Filters
            </button>
        </div>
    </div>
</section>

<!-- Flowbite JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js"></script>
<!-- Font Awesome JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
<!-- noUiSlider JS -->
<script src="https://cdn.jsdelivr.net/npm/nouislider@15.6.1/dist/nouislider.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize price range slider
        const priceRange = document.getElementById('price-range');
        const minPriceInput = document.getElementById('min-price');
        const maxPriceInput = document.getElementById('max-price');
        const priceMin = document.getElementById('price-min');
        const priceMax = document.getElementById('price-max');

        noUiSlider.create(priceRange, {
            start: [0, 15000000],
            connect: true,
            step: 100000,
            range: {
                'min': 0,
                'max': 15000000
            },
            format: {
                to: function (value) {
                    return Math.round(value);
                },
                from: function (value) {
                    return Number(value);
                }
            }
        });

        priceRange.noUiSlider.on('update', function (values, handle) {
            const value = values[handle];
            if (handle === 0) {
                minPriceInput.value = value;
                priceMin.textContent = 'Rs. ' + formatNumber(value);
            } else {
                maxPriceInput.value = value;
                priceMax.textContent = 'Rs. ' + formatNumber(value);
            }
        });

        // Format number with commas
        function formatNumber(num) {
            return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        // Filter form submission
        const filterForm = document.getElementById('filterForm');
        const propertiesContainer = document.getElementById('propertiesContainer');
        const emptyState = document.getElementById('emptyState');
        const activeFilters = document.getElementById('activeFilters');
        const filterBadges = document.getElementById('filterBadges');
        const resetFiltersBtn = document.getElementById('resetFilters');
        const clearFiltersBtn = document.getElementById('clearFilters');

        filterForm.addEventListener('submit', function(e) {
            e.preventDefault();
            applyFilters();
        });

        resetFiltersBtn.addEventListener('click', function() {
            resetFilters();
        });

        clearFiltersBtn.addEventListener('click', function() {
            resetFilters();
        });

        function applyFilters() {
            const minPrice = parseInt(minPriceInput.value);
            const maxPrice = parseInt(maxPriceInput.value);
            const location = document.getElementById('location').value;
            const bedrooms = document.getElementById('bedrooms').value;
            const floor = document.getElementById('floor').value;
            const sort = document.getElementById('sort').value;

            // Clear filter badges
            filterBadges.innerHTML = '';

            // Add filter badges if filters are active
            let hasActiveFilters = false;

            if (minPrice > 0 || maxPrice < 15000000) {
                addFilterBadge(`Price: Rs. ${formatNumber(minPrice)} - Rs. ${formatNumber(maxPrice)}`, 'price');
                hasActiveFilters = true;
            }

            if (location) {
                addFilterBadge(`Location: ${location}`, 'location');
                hasActiveFilters = true;
            }

            if (bedrooms) {
                addFilterBadge(`Bedrooms: ${bedrooms}+`, 'bedrooms');
                hasActiveFilters = true;
            }

            if (floor) {
                addFilterBadge(`Floor: ${floor}`, 'floor');
                hasActiveFilters = true;
            }

            // Show/hide active filters section
            if (hasActiveFilters) {
                activeFilters.classList.remove('hidden');
            } else {
                activeFilters.classList.add('hidden');
            }

            // Filter properties
            const properties = document.querySelectorAll('.property-card');
            let visibleCount = 0;

            properties.forEach(property => {
                const propertyPrice = parseInt(property.dataset.price);
                const propertyLocation = property.dataset.location;
                const propertyBedrooms = parseInt(property.dataset.bedrooms);
                const propertyFloor = property.dataset.floor;

                let isVisible = true;

                // Apply price filter
                if (propertyPrice < minPrice || propertyPrice > maxPrice) {
                    isVisible = false;
                }

                // Apply location filter
                if (location && propertyLocation !== location) {
                    isVisible = false;
                }

                // Apply bedrooms filter
                if (bedrooms && propertyBedrooms < parseInt(bedrooms)) {
                    isVisible = false;
                }

                // Apply floor filter (apartment-specific)
                if (floor) {
                    // Handle different floor ranges
                    if (floor === 'ground' && propertyFloor !== '0') {
                        isVisible = false;
                    } else if (floor === '1-3' && (propertyFloor < 1 || propertyFloor > 3)) {
                        isVisible = false;
                    } else if (floor === '4-8' && (propertyFloor < 4 || propertyFloor > 8)) {
                        isVisible = false;
                    } else if (floor === '9+' && propertyFloor < 9) {
                        isVisible = false;
                    }
                }

                if (isVisible) {
                    property.classList.remove('hidden');
                    visibleCount++;
                } else {
                    property.classList.add('hidden');
                }
            });

            // Show empty state if no properties match filters
            if (visibleCount === 0) {
                propertiesContainer.classList.add('hidden');
                emptyState.classList.remove('hidden');
            } else {
                propertiesContainer.classList.remove('hidden');
                emptyState.classList.add('hidden');

                // Apply sorting
                sortProperties(sort);
            }
        }

        function addFilterBadge(text, type) {
            const badge = document.createElement('div');
            badge.className = 'filter-badge';
            badge.innerHTML = `${text} <i class="fa-solid fa-xmark"></i>`;
            badge.dataset.type = type;

            badge.addEventListener('click', function() {
                removeFilter(type);
            });

            filterBadges.appendChild(badge);
        }

        function removeFilter(type) {
            if (type === 'price') {
                priceRange.noUiSlider.set([0, 15000000]);
            } else if (type === 'location') {
                document.getElementById('location').value = '';
            } else if (type === 'bedrooms') {
                document.getElementById('bedrooms').value = '';
            } else if (type === 'floor') {
                document.getElementById('floor').value = '';
            }

            applyFilters();
        }

        function resetFilters() {
            // Reset price range
            priceRange.noUiSlider.set([0, 15000000]);

            // Reset select inputs
            document.getElementById('location').value = '';
            document.getElementById('bedrooms').value = '';
            document.getElementById('floor').value = '';
            document.getElementById('sort').value = 'newest';

            // Apply filters (which will now show all properties)
            applyFilters();
        }

        function sortProperties(sortType) {
            const properties = Array.from(document.querySelectorAll('.property-card:not(.hidden)'));
            const container = document.getElementById('propertiesContainer');

            properties.sort((a, b) => {
                const priceA = parseInt(a.dataset.price);
                const priceB = parseInt(b.dataset.price);

                if (sortType === 'price_low') {
                    return priceA - priceB;
                } else if (sortType === 'price_high') {
                    return priceB - priceA;
                } else {
                    // Default to newest (already sorted from server)
                    return 0;
                }
            });

            // Remove all properties and re-add them in sorted order
            properties.forEach(property => {
                container.appendChild(property);
            });
        }
    });
</script>