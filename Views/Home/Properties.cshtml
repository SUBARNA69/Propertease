@{
    ViewData["Title"] = "Properties";
}
@model IEnumerable<Properties>

<div class="container mx-auto px-4 py-8">
    <!-- Page Header with Animation -->
    <div class="mb-8 text-center animate__animated animate__fadeIn">
        <h1 class="text-4xl font-extrabold text-gray-900 md:text-5xl lg:text-6xl mb-4">
            <span class="text-transparent bg-clip-text bg-gradient-to-r from-purple-600 via-blue-600 to-cyan-500">
                Discover Your Dream Home
            </span>
        </h1>
        <p class="mt-3 text-gray-600 text-xl max-w-3xl mx-auto">
            Explore our exclusive collection of premium properties tailored to your lifestyle
        </p>
    </div>

    <!-- Stats Counter Section -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8 animate__animated animate__fadeInUp animate__delay-1s">
        <div class="bg-white p-4 rounded-lg shadow-md border border-gray-100 text-center hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <h3 class="text-3xl font-bold text-blue-600 mb-1 counter" data-target="@Model.Count()">0</h3>
            <p class="text-gray-500">Available Properties</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md border border-gray-100 text-center hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <h3 class="text-3xl font-bold text-blue-600 mb-1 counter" data-target="@(Model.Where(p => p.PropertyType == "House").Count())">0</h3>
            <p class="text-gray-500">Houses</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md border border-gray-100 text-center hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <h3 class="text-3xl font-bold text-blue-600 mb-1 counter" data-target="@(Model.Where(p => p.PropertyType == "Apartment").Count())">0</h3>
            <p class="text-gray-500">Apartments</p>
        </div>
        <div class="bg-white p-4 rounded-lg shadow-md border border-gray-100 text-center hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <h3 class="text-3xl font-bold text-blue-600 mb-1 counter" data-target="@(Model.Where(p => p.PropertyType == "Land").Count())">0</h3>
            <p class="text-gray-500">Land Plots</p>
        </div>
    </div>

    <!-- Enhanced Filter Section -->
    <div class="mb-8 animate__animated animate__fadeInUp animate__delay-2s">
        <button id="filterButton" type="button" class="text-white bg-gradient-to-r from-blue-600 to-cyan-500 hover:bg-gradient-to-br focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-3 flex items-center shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
            <svg class="w-4 h-4 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7.75 4H19M7.75 4a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 4h2.25m13.5 6H19m-2.25 0a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 10h11.25m-4.5 6H19M7.75 16a2.25 2.25 0 0 1-4.5 0m4.5 0a2.25 2.25 0 0 0-4.5 0M1 16h2.25" />
            </svg>
            Filter Properties
        </button>

        <!-- Collapsible Filter Section with Animation -->
        <div id="filterSection" class="hidden mt-4 p-6 bg-white border border-gray-200 rounded-lg shadow-lg transition-all duration-500 ease-in-out">
            <form id="filterForm" method="get" action="/Home/Properties" class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="transition-all duration-300 hover:scale-105">
                    <label for="propertyType" class="block mb-2 text-sm font-medium text-gray-900">Property Type</label>
                    <select id="propertyType" name="propertyType" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3 transition-colors duration-300">
                        <option value="">All Types</option>
                        <option value="Apartment">Apartment</option>
                        <option value="House">House</option>
                        <option value="Land">Land</option>
                    </select>
                </div>

                <div class="transition-all duration-300 hover:scale-105">
                    <label for="district" class="block mb-2 text-sm font-medium text-gray-900">District</label>
                    <input type="text" id="district" name="district" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3 transition-colors duration-300" placeholder="Enter district">
                </div>

                <div class="transition-all duration-300 hover:scale-105">
                    <label for="priceRange" class="block mb-2 text-sm font-medium text-gray-900">Price Range</label>
                    <select id="priceRange" name="priceRange" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3 transition-colors duration-300">
                        <option value="">Any Price</option>
                        <option value="0-100000">$0 - $100,000</option>
                        <option value="100000-300000">$100,000 - $300,000</option>
                        <option value="300000-500000">$300,000 - $500,000</option>
                        <option value="500000-1000000">$500,000 - $1,000,000</option>
                        <option value="1000000+">$1,000,000+</option>
                    </select>
                </div>

                <div class="md:col-span-3">
                    <label class="block mb-2 text-sm font-medium text-gray-900">Amenities</label>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div class="flex items-center">
                            <input id="pool" type="checkbox" name="amenities" value="pool" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500">
                            <label for="pool" class="ml-2 text-sm font-medium text-gray-900">Swimming Pool</label>
                        </div>
                        <div class="flex items-center">
                            <input id="garage" type="checkbox" name="amenities" value="garage" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500">
                            <label for="garage" class="ml-2 text-sm font-medium text-gray-900">Garage</label>
                        </div>
                        <div class="flex items-center">
                            <input id="garden" type="checkbox" name="amenities" value="garden" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500">
                            <label for="garden" class="ml-2 text-sm font-medium text-gray-900">Garden</label>
                        </div>
                        <div class="flex items-center">
                            <input id="security" type="checkbox" name="amenities" value="security" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500">
                            <label for="security" class="ml-2 text-sm font-medium text-gray-900">Security System</label>
                        </div>
                    </div>
                </div>

                <div class="md:col-span-3 flex flex-wrap gap-2 items-center">
                    <span class="text-sm font-medium text-gray-900">Popular Locations:</span>
                    <button type="button" data-district="Downtown" class="location-btn px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium hover:bg-blue-200 transition-colors duration-300 hover:scale-105 transform">Downtown</button>
                    <button type="button" data-district="Westside" class="location-btn px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium hover:bg-blue-200 transition-colors duration-300 hover:scale-105 transform">Westside</button>
                    <button type="button" data-district="Eastside" class="location-btn px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium hover:bg-blue-200 transition-colors duration-300 hover:scale-105 transform">Eastside</button>
                    <button type="button" data-district="Northside" class="location-btn px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm font-medium hover:bg-blue-200 transition-colors duration-300 hover:scale-105 transform">Northside</button>
                </div>

                <div class="md:col-span-3 flex flex-wrap gap-3">
                    <button type="submit" class="text-white bg-gradient-to-r from-blue-600 to-cyan-500 hover:bg-gradient-to-br focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 flex items-center transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
                        <svg class="w-4 h-4 mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                        </svg>
                        Apply Filters
                    </button>
                    <button type="button" id="clearFilters" class="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
                        Clear Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Sort Options -->
    <div class="flex flex-wrap justify-between items-center mb-6 animate__animated animate__fadeInUp animate__delay-3s">
        <p class="text-gray-600 mb-4 md:mb-0">
            Showing <span class="font-semibold">@Model.Count()</span> properties
        </p>
        <div class="flex items-center">
            <label for="sortOption" class="mr-2 text-sm font-medium text-gray-900">Sort by:</label>
            <select id="sortOption" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2.5">
                <option value="newest">Newest</option>
                <option value="price-asc">Price: Low to High</option>
                <option value="price-desc">Price: High to Low</option>
                <option value="popular">Most Popular</option>
            </select>
        </div>
    </div>

    <!-- Properties Grid with Animation -->
    <main class="animate__animated animate__fadeIn animate__delay-4s">
        @if (Model.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6" id="propertiesGrid">
                @foreach (var property in Model)
                {
                    <div class="bg-white border border-gray-200 rounded-xl shadow-md overflow-hidden group hover:shadow-2xl transition-all duration-500 hover:-translate-y-2 property-card"
                         data-type="@property.PropertyType"
                         data-district="@property.District"
                         data-price="@property.Price">
                        <div class="relative overflow-hidden">
                            @if (property.PropertyImages != null && property.PropertyImages.Any())
                            {
                                <img src="~/Images/@property.PropertyImages.First().Photo" alt="@property.Title" class="w-full h-64 object-cover group-hover:scale-110 transition-transform duration-700 ease-in-out">
                            }
                            else
                            {
                                <div class="w-full h-64 bg-gradient-to-r from-gray-200 to-gray-300 flex items-center justify-center">
                                    <span class="text-gray-500">No Image Available</span>
                                </div>
                            }
                            <div class="absolute top-2 right-2 bg-gradient-to-r from-blue-600 to-cyan-500 text-white text-xs font-semibold px-3 py-1 rounded-full shadow-lg">
                                @property.PropertyType
                            </div>
                            <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 transform translate-y-full group-hover:translate-y-0 transition-transform duration-500 ease-in-out">
                                <div class="flex justify-between items-center">
                                    <span class="text-white font-semibold">View Details</span>
                                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>

                        <div class="p-5">
                            <h3 class="text-xl font-bold tracking-tight text-gray-900 mb-2 group-hover:text-blue-600 transition-colors duration-300">@property.Title</h3>

                            <div class="flex items-center text-gray-500 text-sm mb-3">
                                <svg class="w-4 h-4 mr-1 text-blue-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 21">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" />
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.8 12.938h-.01a7 7 0 1 0-11.465.144h-.016l.141.17c.1.128.2.252.3.372L8 20l5.13-6.248c.193-.209.373-.429.54-.66l.13-.154Z" />
                                </svg>
                                @property.City, @property.District
                            </div>

                            <p class="mb-3 font-normal text-gray-700 line-clamp-2">@property.Description</p>

                            <div class="flex items-center justify-between mt-4 mb-3">
                                <span class="text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-cyan-500">@property.Price.ToString("C0")</span>
                                <div class="flex items-center text-sm text-gray-500">
                                    <svg class="w-4 h-4 mr-1 text-yellow-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 22 20">
                                        <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
                                    </svg>
                                    <span>4.8</span>
                                </div>
                            </div>

                            <div class="flex flex-wrap gap-2 mb-4">
                                <span class="bg-blue-50 text-blue-700 text-xs font-medium px-2.5 py-0.5 rounded-full">3 Beds</span>
                                <span class="bg-blue-50 text-blue-700 text-xs font-medium px-2.5 py-0.5 rounded-full">2 Baths</span>
                                <span class="bg-blue-50 text-blue-700 text-xs font-medium px-2.5 py-0.5 rounded-full">1,500 sqft</span>
                            </div>

                            <a href="@Url.Action("Details", "Home", new { id = property.Id })" class="inline-flex items-center w-full justify-center px-3 py-2.5 text-sm font-medium text-center text-white bg-gradient-to-r from-blue-600 to-cyan-500 rounded-lg hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 transition-all duration-300 shadow-md hover:shadow-lg">
                                View Details
                                <svg class="w-3.5 h-3.5 ml-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
                                </svg>
                            </a>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="p-12 text-center bg-white border border-gray-200 rounded-lg shadow-md animate__animated animate__fadeIn">
                <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                <h3 class="text-2xl font-semibold text-gray-900 mb-2">No Properties Found</h3>
                <p class="text-gray-500 mb-6">We couldn't find any properties matching your criteria.</p>
                <button id="resetFiltersBtn" class="text-white bg-gradient-to-r from-blue-600 to-cyan-500 hover:bg-gradient-to-br focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-base px-6 py-3 focus:outline-none transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
                    Reset Filters
                </button>
            </div>
        }
    </main>

    <!-- Back to Top Button -->
    <button id="backToTopBtn" class="fixed bottom-6 right-6 p-3 bg-blue-600 text-white rounded-full shadow-lg opacity-0 transition-opacity duration-300 hover:bg-blue-700">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
        </svg>
    </button>
</div>

<!-- Add Animate.css for animations -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle Filter Section with animation
        const filterButton = document.getElementById('filterButton');
        const filterSection = document.getElementById('filterSection');

        filterButton.addEventListener('click', function() {
            if (filterSection.classList.contains('hidden')) {
                filterSection.classList.remove('hidden');
                filterSection.classList.add('animate__animated', 'animate__fadeIn');
            } else {
                filterSection.classList.add('animate__fadeOut');
                setTimeout(() => {
                    filterSection.classList.add('hidden');
                    filterSection.classList.remove('animate__fadeOut');
                }, 500);
            }
        });

        // Location buttons functionality
        const locationButtons = document.querySelectorAll('.location-btn');
        locationButtons.forEach(button => {
            button.addEventListener('click', function() {
                const district = this.getAttribute('data-district');
                document.getElementById('district').value = district;
                // Add active state to the clicked button
                locationButtons.forEach(btn => btn.classList.remove('bg-blue-500', 'text-white'));
                this.classList.add('bg-blue-500', 'text-white');
            });
        });

        // Clear filters functionality
        document.getElementById('clearFilters').addEventListener('click', function() {
            document.getElementById('filterForm').reset();
            locationButtons.forEach(btn => btn.classList.remove('bg-blue-500', 'text-white'));
        });

        // Reset filters button in "No properties found" section
        const resetFiltersBtn = document.getElementById('resetFiltersBtn');
        if (resetFiltersBtn) {
            resetFiltersBtn.addEventListener('click', function() {
                window.location.href = '/Home/Properties';
            });
        }

        // Sort functionality
        document.getElementById('sortOption').addEventListener('change', function() {
            const sortValue = this.value;
            const propertiesGrid = document.getElementById('propertiesGrid');
            const propertyCards = Array.from(document.querySelectorAll('.property-card'));

            propertyCards.sort((a, b) => {
                if (sortValue === 'price-asc') {
                    return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));
                } else if (sortValue === 'price-desc') {
                    return parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'));
                } else if (sortValue === 'newest') {
                    // For demo purposes, just reverse the current order
                    return -1;
                } else {
                    // Popular - could be based on ratings in a real app
                    return 0;
                }
            });

            // Clear the grid and append sorted items
            propertiesGrid.innerHTML = '';
            propertyCards.forEach(card => {
                // Add animation to each card when sorting
                card.classList.add('animate__animated', 'animate__fadeIn');
                propertiesGrid.appendChild(card);
            });
        });

        // Counter animation for stats
        const counters = document.querySelectorAll('.counter');
        counters.forEach(counter => {
            const target = parseInt(counter.getAttribute('data-target'));
            const duration = 2000; // 2 seconds
            const step = target / (duration / 16); // 60fps
            let current = 0;

            const updateCounter = () => {
                current += step;
                if (current < target) {
                    counter.textContent = Math.ceil(current);
                    requestAnimationFrame(updateCounter);
                } else {
                    counter.textContent = target;
                }
            };

            updateCounter();
        });

        // Back to top button
        const backToTopBtn = document.getElementById('backToTopBtn');

        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                backToTopBtn.classList.remove('opacity-0');
                backToTopBtn.classList.add('opacity-100');
            } else {
                backToTopBtn.classList.remove('opacity-100');
                backToTopBtn.classList.add('opacity-0');
            }
        });

        backToTopBtn.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        // Add hover effect to property cards
        const propertyCards = document.querySelectorAll('.property-card');
        propertyCards.forEach(card => {
            card.addEventListener('mouseenter', function() {
                this.querySelector('img').classList.add('scale-110');
            });

            card.addEventListener('mouseleave', function() {
                this.querySelector('img').classList.remove('scale-110');
            });
        });
    });
</script>