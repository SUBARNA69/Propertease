@model Propertease.Models.PropertyDetailsViewModel

@{
    // Assign the 3D Virtual Tour URL to a variable to avoid nested quote issues.
    var modelViewerUrl = Url.Action("ModelViewer", "Home", new { id = Model.Id });
}

<script src="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.css" rel="stylesheet">


<div class="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
@if (Model.SimilarProperties != null && Model.SimilarProperties.Any())
{
    <div class="mt-8">
        <h3 class="text-2xl font-bold mb-4">Similar Properties</h3>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            @foreach (var property in Model.SimilarProperties)
            {
                <div class="max-w-sm bg-white border border-gray-200 rounded-lg shadow">
                    <a href="@Url.Action("Details", "Home", new { id = property.Id })">
                        <img class="rounded-t-lg w-full h-48 object-cover" src="@property.ImageUrl" alt="@property.Title" />
                    </a>
                    <div class="p-5">
                        <h5 class="mb-2 text-lg font-bold tracking-tight text-gray-900 truncate">@property.Title</h5>
                        <p class="mb-1 font-normal text-gray-700">@property.Price.ToString("C")</p>
                        <p class="mb-3 font-normal text-gray-700 text-sm">@property.District, @property.City</p>
                        <a href="@Url.Action("Details", "Home", new { id = property.Id })" 
                           class="inline-flex items-center w-full justify-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700 rounded-lg hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300">
                            View Details
                            <svg class="w-3.5 h-3.5 ml-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"/>
                            </svg>
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="p-4 mb-4 text-sm text-blue-800 rounded-lg bg-blue-50" role="alert">
        <span class="font-medium">No similar properties found.</span>
    </div>
}
    <div class="relative">
        @if (Model.ImageUrl.Any())
        {
            <!-- Image Gallery -->
            <div id="propertyGallery">
                <!-- Main Image -->
                <div class="relative">
                    <img id="mainImage" src="@Model.ImageUrl.First()" alt="@Model.Title" class="w-full h-64 object-cover">
                    <div class="absolute bottom-0 left-0 bg-black bg-opacity-50 text-white p-4">
                        <h1 class="text-2xl font-bold">$@Model.Price</h1>
                        <p class="text-sm">@Model.City, @Model.District, @Model.Province</p>
                    </div>
                </div>

                <!-- Thumbnails -->
                <div class="flex mt-2 space-x-2 overflow-x-auto pb-2">
                    @for (int i = 0; i < Model.ImageUrl.Count; i++)
                    {
                        <div class="thumbnail flex-shrink-0 cursor-pointer border-2 rounded @(i == 0 ? "border-blue-500" : "border-transparent")"
                             data-index="@i" data-src="@Model.ImageUrl[i]">
                            <img src="@Model.ImageUrl[i]" alt="Thumbnail @(i+1)" class="w-20 h-20 object-cover">
                        </div>
                    }
                </div>

                <!-- Fullscreen Modal -->
                <div id="imageFullscreenModal" class="fixed inset-0 bg-black bg-opacity-90 z-50 flex items-center justify-center hidden">
                    <button id="closeFullscreenImage" class="absolute top-4 right-4 text-white bg-black bg-opacity-50 p-2 rounded-full">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <line x1="18" y1="6" x2="6" y2="18"></line>
                            <line x1="6" y1="6" x2="18" y2="18"></line>
                        </svg>
                    </button>
                    <img id="fullscreenImage" src="/placeholder.svg" alt="Property Image Fullscreen" class="max-w-full max-h-[90vh] object-contain">

                    <!-- Navigation arrows -->
                    <button id="prevImageBtn" class="absolute left-4 text-white bg-black bg-opacity-50 p-2 rounded-full">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="15 18 9 12 15 6"></polyline>
                        </svg>
                    </button>
                    <button id="nextImageBtn" class="absolute right-4 text-white bg-black bg-opacity-50 p-2 rounded-full">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <polyline points="9 18 15 12 9 6"></polyline>
                        </svg>
                    </button>

                    <!-- Image counter -->
                    <div class="absolute bottom-4 left-0 right-0 text-center text-white">
                        <span id="currentFullscreenIndex">1</span> / <span id="totalFullscreenImages">@Model.ImageUrl.Count</span>
                    </div>
                </div>
            </div>
        }
        else
        {
            <img src="https://via.placeholder.com/800x400" alt="Property Main Image" class="w-full h-64 object-cover">
            <div class="absolute bottom-0 left-0 bg-black bg-opacity-50 text-white p-4">
                <h1 class="text-2xl font-bold">$@Model.Price</h1>
                <p class="text-sm">@Model.City, @Model.District, @Model.Province</p>
            </div>
        }
    </div>

    <div class="p-6">
        @if (!string.IsNullOrEmpty(Model.ThreeDModel))
        {
            <a href="@modelViewerUrl" class="text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-purple-600 dark:hover:bg-purple-700 focus:outline-none dark:focus:ring-purple-800">
                <svg class="w-4 h-4 inline-block mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                    <path d="M8 0a8 8 0 0 0-8 8 8.034 8.034 0 0 0 1.014 3.9.5.5 0 0 0 .131.172l.414.42 7.067 7.069a.5.5 0 0 0 .707 0l7.067-7.069.414-.42a.5.5 0 0 0 .131-.172A8.034 8.034 0 0 0 16 8a8 8 0 0 0-8-8Zm0 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z" />
                </svg>
                View 3D Virtual Tour
            </a>
        }
        @if (Model.PredictedPrice.HasValue)
{
    <p><strong>Predicted Market Price:</strong> ₹@Model.PredictedPrice.Value.ToString("N0")</p>
}

        <div class="text-gray-600 space-y-2">
            <p>📍 Location: @Model.City, @Model.District, @Model.Province</p>
            <p>📘 Road Access: @Model.RoadAccess</p>

            @if (Model.PropertyType == "House")
            {
                <p>🏠 House - @Model.Bedrooms Bedrooms, @Model.Bathrooms Bathrooms, @Model.Kitchens Kitchens</p>
                <p>🏠 HouseArea - @Model.BuildupArea</p>
                <p>📎 Area: @Model.LandArea sq ft</p>
                <p>📅 Built Year: @Model.BuiltYear</p>
            }
            else if (Model.PropertyType == "Apartment")
            {
                <p>🏢 Apartment - @Model.Rooms Rooms, @Model.Bathrooms Bathrooms, @Model.Kitchens Kitchens</p>
                <p>📎 Room Size: @Model.RoomSize sq ft</p>
            }
            else if (Model.PropertyType == "Land")
            {
                <p>🌍 Land - @Model.LandType, Soil Quality: @Model.SoilQuality</p>
                <p>📎 Land Area: @Model.LandArea sq ft</p>
            }
        </div>

        <p class="mt-4 text-gray-700">@Model.Description</p>

        <div class="mt-6">
            <h2 class="text-lg font-semibold">Map View</h2>
            <div id="mapContainer" class="relative mt-2">
                <div id="map" class="h-48 bg-gray-200 rounded-lg"></div>
                <!-- Map Control Buttons -->
                <div class="absolute top-2 right-2 flex flex-col gap-2 z-10">
                    <button id="fullscreenBtn" class="map-control-btn bg-white p-1.5 rounded shadow-sm hover:bg-gray-100 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3"></path><path d="M21 8V5a2 2 0 0 0-2-2h-3"></path><path d="M3 16v3a2 2 0 0 0 2 2h3"></path><path d="M16 21h3a2 2 0 0 0 2-2v-3"></path></svg>
                    </button>
                    <button id="showDistanceBtn" class="map-control-btn bg-white p-1.5 rounded shadow-sm hover:bg-gray-100 flex items-center gap-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg>
                        <span class="text-xs">Show Distance</span>
                    </button>
                </div>
                <!-- Distance Info Panel -->
                <div id="distanceInfo" class="hidden absolute bottom-2 left-2 bg-white p-2 rounded shadow-md z-10">
                    <div class="text-sm font-medium">Distance: <span id="distanceValue">-</span></div>
                    <div class="text-sm font-medium">Driving time: <span id="durationValue">-</span></div>
                </div>
            </div>
        </div>

        <div class="mt-6 flex items-center space-x-4">
            <div class="flex-shrink-0 relative" id="sellerProfileContainer">
                @if (!string.IsNullOrEmpty(Model.SellerImage))
                {
                    <img src="~/Images/@Model.SellerImage" alt="@Model.SellerName" class="h-12 w-12 rounded-full cursor-pointer" id="sellerImage">
                }
                else
                {
                    <img src="https://via.placeholder.com/50" alt="@Model.SellerName" class="h-12 w-12 rounded-full cursor-pointer" id="sellerImage">
                }
                <!-- Dropdown menu for seller profile options -->
                <div id="sellerOptions" class="absolute left-0 mt-2 w-36 bg-white rounded-md shadow-lg z-10 hidden">
                    <ul class="py-1">
                        <li><a href="#" id="viewProfileBtn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile</a></li>
                        <li><a href="#" id="reportSellerBtn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Report</a></li>
                    </ul>
                </div>
            </div>
            <div>
                <h3 class="text-lg font-semibold">@Model.SellerName</h3>
                <p class="text-gray-600">📘 @Model.SellerContact</p>

                <!-- Add seller rating display -->
                <div class="flex items-center mt-1">
                    <div class="flex items-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Round(Model.SellerAverageRating))
                            {
                                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-4 h-4 text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                        }
                    </div>
                    <span class="ml-1 text-xs text-gray-500">(@Model.SellerAverageRating.ToString("F1")) from @Model.SellerTotalRatings reviews</span>
                </div>
            </div>
        </div>

        <div class="mt-6 flex space-x-4">
            <button id="scheduleViewingBtn" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700">Schedule Viewing</button>
            <!-- Add this button to your Details.cshtml view, next to the "Predict Price" button -->
            <button id="addToCompareBtn" class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                Add to Compare
            </button>
            <div id="compareCountContainer" class="hidden mb-4">
                <a href="@Url.Action("CompareProperties", "Home")" class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                    Compare (<span id="compareCount">0</span>) properties
                </a>
            </div>
        </div>
    </div>
</div>
<!-- Schedule Viewing Modal -->
<div id="scheduleViewingModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Schedule Property Viewing</h3>
            <div class="mt-2 px-7 py-3">
                <form action="@Url.Action("ScheduleViewing", "Home")" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="PropertyId" value="@Model.Id" />
                    <input type="hidden" name="Status" value="Pending" />

                    <div class="mb-4">
                        <label for="buyerName" class="block text-gray-700 text-sm font-bold mb-2">Your Name</label>
                        <input type="text" id="buyerName" name="BuyerName" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                    </div>

                    <div class="mb-4">
                        <label for="buyerEmail" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                        <input type="email" id="buyerEmail" name="BuyerEmail" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                    </div>

                    <div class="mb-4">
                        <label for="buyerContact" class="block text-gray-700 text-sm font-bold mb-2">Contact Number</label>
                        <input type="tel" id="buyerContact" name="BuyerContact" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                    </div>

                    <div class="mb-4">
                        <label for="viewingDate" class="block text-gray-700 text-sm font-bold mb-2">Preferred Date</label>
                        <input type="date" id="viewingDate" name="ViewingDate" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required min="@DateTime.Now.ToString("yyyy-MM-dd")">
                    </div>

                    <div class="mb-4">
                        <label for="viewingTime" class="block text-gray-700 text-sm font-bold mb-2">Preferred Time</label>
                        <select id="viewingTime" name="ViewingTime" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                            <option value="">Select Time</option>
                            <option value="09:00">9:00 AM</option>
                            <option value="10:00">10:00 AM</option>
                            <option value="11:00">11:00 AM</option>
                            <option value="12:00">12:00 PM</option>
                            <option value="13:00">1:00 PM</option>
                            <option value="14:00">2:00 PM</option>
                            <option value="15:00">3:00 PM</option>
                            <option value="16:00">4:00 PM</option>
                            <option value="17:00">5:00 PM</option>
                        </select>
                    </div>

                    <div class="mb-4">
                        <label for="notes" class="block text-gray-700 text-sm font-bold mb-2">Additional Notes</label>
                        <textarea id="notes" name="Notes" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" rows="3"></textarea>
                    </div>

                    <div class="flex items-center justify-between mt-4">
                        <button type="button" id="closeModal" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">Cancel</button>
                        <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">Submit Request</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Seller Profile Modal -->
<div id="sellerProfileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center border-b pb-3">
            <h3 class="text-xl font-medium text-gray-900">Seller Profile</h3>
            <button type="button" id="closeProfileModal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
        <div class="mt-4 max-h-[70vh] overflow-y-auto">
            <div class="flex items-center space-x-4 mb-4">
                <div class="flex-shrink-0">
                    @if (!string.IsNullOrEmpty(Model.SellerImage))
                    {
                        <img src="~/Images/@Model.SellerImage" alt="@Model.SellerName" class="h-20 w-20 rounded-full">
                    }
                    else
                    {
                        <img src="https://via.placeholder.com/80" alt="@Model.SellerName" class="h-20 w-20 rounded-full">
                    }
                </div>
                <div>
                    <h4 class="text-xl font-bold">@Model.SellerName</h4>
                    <p class="text-gray-600">Member since @Model.CreatedAt</p>
                </div>
            </div>

            <div class="mb-4">
                <h5 class="font-semibold text-lg mb-2">Contact Information</h5>
                <p class="text-gray-700">📱 Phone: @Model.SellerContact</p>
                <p class="text-gray-700">📧 Email: @Model.SellerEmail</p>
            </div>

            <div class="mb-4">
                <h5 class="font-semibold text-lg mb-2">Ratings & Reviews</h5>
                <div class="flex items-center mb-2">
                    <div class="flex items-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Round(Model.SellerAverageRating))
                            {
                                <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-5 h-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                        }
                        <span class="ml-2 text-gray-600">@Model.SellerAverageRating.ToString("F1") out of 5</span>
                    </div>
                </div>
                <p class="text-sm text-gray-600 mb-3">Based on @Model.SellerTotalRatings reviews</p>
                    </div>
                
            </div>

            <div class="mb-4">
                <h5 class="font-semibold text-lg mb-2">Past Properties</h5>
                @if (Model.SellerPastProperties != null && Model.SellerPastProperties.Any())
                {
                    <div class="grid grid-cols-2 gap-3">
                        @foreach (var property in Model.SellerPastProperties)
                        {
                            <a href="@Url.Action("Details", "Home", new { id = property.Id })" class="block border rounded-md overflow-hidden hover:shadow-md transition-shadow">
                                <div class="relative">
                                    <img src="@property.ImageUrl" alt="@property.Title" class="w-full h-24 object-cover">
                                    @if (property.Status == "Sold")
                                    {
                                        <div class="absolute top-0 right-0 bg-red-500 text-white text-xs px-2 py-1 m-1 rounded">Sold</div>
                                    }
                                </div>
                                <div class="p-2">
                                    <p class="text-sm font-medium line-clamp-1">@property.Title</p>
                                    <p class="text-xs text-gray-600">$@property.Price.ToString("N0")</p>
                                    <p class="text-xs text-gray-500">Listed: @property.ListedDate</p>
                                </div>
                            </a>
                        }
                    </div>
                }
                else
                {
                    <p class="text-gray-600 text-sm italic">No other properties listed by this seller</p>
                }
            </div>

        </div>
    </div>

<!-- Report Seller Modal (Placeholder - not implemented yet) -->
<div id="reportSellerModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center border-b pb-3">
            <h3 class="text-xl font-medium text-gray-900">Report Seller</h3>
            <button type="button" id="closeReportModal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
        <div class="mt-4 text-center">
            <p class="text-gray-700">Report functionality will be implemented in the future.</p>
            <button type="button" id="closeReportBtn" class="mt-4 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">Close</button>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        // Image Gallery Functionality
        var currentIndex = 0;
        var totalImages = @Model.ImageUrl.Count;
        var imageUrls = [@Html.Raw(string.Join(",", Model.ImageUrl.Select(url => $"'{url}'")))];

        // Handle thumbnail clicks
        $('.thumbnail').click(function() {
            var index = $(this).data('index');
            var src = $(this).data('src');

            // Update main image
            $('#mainImage').attr('src', src);

            // Update active thumbnail
            $('.thumbnail').removeClass('border-blue-500').addClass('border-transparent');
            $(this).removeClass('border-transparent').addClass('border-blue-500');

            // Update current index
            currentIndex = index;
        });

        // Open fullscreen on main image click
        $('#mainImage').click(function() {
            openFullscreen(currentIndex);
        });

        // Close fullscreen
        $('#closeFullscreenImage').click(function() {
            $('#imageFullscreenModal').addClass('hidden');
            $('body').css('overflow', '');
        });

        // Close fullscreen on background click
        $('#imageFullscreenModal').click(function(e) {
            if (e.target === this) {
                $(this).addClass('hidden');
                $('body').css('overflow', '');
            }
        });

        // Previous image button
        $('#prevImageBtn').click(function(e) {
            e.stopPropagation();
            navigateFullscreen(-1);
        });

        // Next image button
        $('#nextImageBtn').click(function(e) {
            e.stopPropagation();
            navigateFullscreen(1);
        });

        // Keyboard navigation
        $(document).keydown(function(e) {
            if ($('#imageFullscreenModal').hasClass('hidden')) return;

            if (e.key === 'Escape') {
                $('#imageFullscreenModal').addClass('hidden');
                $('body').css('overflow', '');
            } else if (e.key === 'ArrowRight') {
                navigateFullscreen(1);
            } else if (e.key === 'ArrowLeft') {
                navigateFullscreen(-1);
            }
        });

        // Helper function to open fullscreen
        function openFullscreen(index) {
            $('#fullscreenImage').attr('src', imageUrls[index]);
            $('#currentFullscreenIndex').text(index + 1);
            $('#imageFullscreenModal').removeClass('hidden');
            $('body').css('overflow', 'hidden'); // Prevent scrolling
            currentIndex = index;
        }

        // Helper function to navigate in fullscreen
        function navigateFullscreen(direction) {
            var newIndex = (currentIndex + direction + totalImages) % totalImages;
            openFullscreen(newIndex);

            // Also update the main image and thumbnails
            $('#mainImage').attr('src', imageUrls[newIndex]);
            $('.thumbnail').removeClass('border-blue-500').addClass('border-transparent');
            $('.thumbnail[data-index="' + newIndex + '"]').removeClass('border-transparent').addClass('border-blue-500');
        }

        // Mapbox initialization
        mapboxgl.accessToken = 'pk.eyJ1Ijoia3Jvc3NzdWJhcm5hIiwiYSI6ImNtN3NteGp5ajE2dWgyanNibHNxc2o5YXcifQ.GSxJY20oRcqu6qnF154OEg';

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [@Model.Longitude, @Model.Latitude],
            zoom: 12
        });

        // Add navigation controls
        map.addControl(new mapboxgl.NavigationControl());

        // Add property marker
        new mapboxgl.Marker()
            .setLngLat([@Model.Longitude, @Model.Latitude])
            .addTo(map);

        // Map enhancement features
        const mapContainer = document.getElementById('mapContainer');
        const mapElement = document.getElementById('map');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const showDistanceBtn = document.getElementById('showDistanceBtn');
        const distanceInfo = document.getElementById('distanceInfo');
        const distanceValue = document.getElementById('distanceValue');
        const durationValue = document.getElementById('durationValue');

        let isFullscreen = false;
        let routeShown = false;
        let userMarker = null;

        // Toggle fullscreen
        fullscreenBtn.addEventListener('click', function() {
            isFullscreen = !isFullscreen;

            if (isFullscreen) {
                // Make map fullscreen
                mapContainer.style.position = 'fixed';
                mapContainer.style.top = '0';
                mapContainer.style.left = '0';
                mapContainer.style.width = '100%';
                mapContainer.style.height = '100%';
                mapContainer.style.zIndex = '9999';
                mapContainer.style.backgroundColor = 'white';
                mapElement.style.height = '100%';
                mapElement.style.borderRadius = '0';

                // Change icon to minimize
                fullscreenBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3v3a2 2 0 0 1-2 2H3"></path><path d="M21 8h-3a2 2 0 0 1-2-2V3"></path><path d="M3 16h3a2 2 0 0 1 2 2v3"></path><path d="M16 21v-3a2 2 0 0 1 2-2h3"></path></svg>';
            } else {
                // Restore original size
                mapContainer.style.position = 'relative';
                mapContainer.style.top = 'auto';
                mapContainer.style.left = 'auto';
                mapContainer.style.width = '100%';
                mapContainer.style.height = 'auto';
                mapContainer.style.zIndex = '1';
                mapContainer.style.backgroundColor = 'transparent';
                mapElement.style.height = '48px';
                mapElement.style.borderRadius = '0.5rem';

                // Change icon back to expand
                fullscreenBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3"></path><path d="M21 8V5a2 2 0 0 0-2-2h-3"></path><path d="M3 16v3a2 2 0 0 0 2 2h3"></path><path d="M16 21h3a2 2 0 0 0 2-2v-3"></path></svg>';
            }

            // Resize map after DOM changes
            setTimeout(function() {
                map.resize();
            }, 100);
        });

        // Show distance functionality
        showDistanceBtn.addEventListener('click', function() {
            if (routeShown) {
                // Remove existing route and markers
                if (userMarker) userMarker.remove();
                if (map.getLayer('route')) map.removeLayer('route');
                if (map.getSource('route')) map.removeSource('route');
                distanceInfo.classList.add('hidden');

                routeShown = false;
                showDistanceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg> <span class="text-xs">Show Distance</span>';
                return;
            }

            // Request user location
            if (navigator.geolocation) {
                showDistanceBtn.disabled = true;
                showDistanceBtn.innerHTML = '<span class="text-xs">Loading...</span>';

                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const userCoords = [position.coords.longitude, position.coords.latitude];

                        // Add user location marker
                        userMarker = new mapboxgl.Marker({ color: '#3887be' })
                            .setLngLat(userCoords)
                            .setPopup(new mapboxgl.Popup({ offset: 25 }).setText('Your Location'))
                            .addTo(map);

                        // Get directions from Mapbox Directions API
                        fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/${userCoords[0]},${userCoords[1]};${@Model.Longitude},${@Model.Latitude}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`)
                            .then(response => response.json())
                            .then(data => {
                                if (!data.routes || data.routes.length === 0) {
                                    throw new Error('No route found');
                                }

                                const route = data.routes[0];

                                // Calculate distance and duration
                                const distanceInKm = (route.distance / 1000).toFixed(1);
                                const durationInMinutes = Math.round(route.duration / 60);

                                // Display distance information
                                distanceValue.textContent = `${distanceInKm} km`;
                                durationValue.textContent = `${durationInMinutes} min`;
                                distanceInfo.classList.remove('hidden');

                                // Add route to map
                                map.addSource('route', {
                                    type: 'geojson',
                                    data: {
                                        type: 'Feature',
                                        properties: {},
                                        geometry: route.geometry
                                    }
                                });

                                map.addLayer({
                                    id: 'route',
                                    type: 'line',
                                    source: 'route',
                                    layout: {
                                        'line-join': 'round',
                                        'line-cap': 'round'
                                    },
                                    paint: {
                                        'line-color': '#3887be',
                                        'line-width': 5,
                                        'line-opacity': 0.75
                                    }
                                });

                                // Fit map to show both points
                                const bounds = new mapboxgl.LngLatBounds();
                                bounds.extend(userCoords);
                                bounds.extend([@Model.Longitude, @Model.Latitude]);

                                map.fitBounds(bounds, {
                                    padding: 50,
                                    maxZoom: 15
                                });

                                routeShown = true;
                                showDistanceBtn.disabled = false;
                                showDistanceBtn.innerHTML = '<span class="text-xs">Hide Route</span>';
                            })
                            .catch(error => {
                                console.error('Error getting directions:', error);
                                alert('Unable to calculate directions. Please try again later.');
                                showDistanceBtn.disabled = false;
                                showDistanceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg> <span class="text-xs">Show Distance</span>';
                            });
                    },
                    function(error) {
                        console.error('Error getting location:', error);
                        let errorMessage = 'Unable to get your location.';

                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage += ' Please allow location access.';
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage += ' Location information is unavailable.';
                                break;
                            case error.TIMEOUT:
                                errorMessage += ' The request timed out.';
                                break;
                        }

                        alert(errorMessage);
                        showDistanceBtn.disabled = false;
                        showDistanceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg> <span class="text-xs">Show Distance</span>';
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 5000,
                        maximumAge: 0
                    }
                );
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        });

        // Schedule Viewing Modal
        const modal = document.getElementById('scheduleViewingModal');
        const openModalBtn = document.getElementById('scheduleViewingBtn');
        const closeModalBtn = document.getElementById('closeModal');

        // Open modal and fetch user data
        openModalBtn.addEventListener('click', function() {
            modal.classList.remove('hidden');

            // Fetch buyer details if user is logged in
            fetch('/Home/GetBuyerDetails')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('buyerName').value = data.name || '';
                        document.getElementById('buyerEmail').value = data.email || '';
                        document.getElementById('buyerContact').value = data.contactNumber || '';
                    }
                })
                .catch(error => console.error('Error fetching buyer details:', error));
        });

        // Close modal when clicking the close button
        closeModalBtn.addEventListener('click', function() {
            modal.classList.add('hidden');
        });

        // Close modal when clicking outside of the modal content
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.classList.add('hidden');
            }
        });

        // Seller Profile Functionality
        const sellerImage = document.getElementById('sellerImage');
        const sellerOptions = document.getElementById('sellerOptions');
        const sellerProfileModal = document.getElementById('sellerProfileModal');
        const reportSellerModal = document.getElementById('reportSellerModal');
        const viewProfileBtn = document.getElementById('viewProfileBtn');
        const reportSellerBtn = document.getElementById('reportSellerBtn');
        const closeProfileModal = document.getElementById('closeProfileModal');
        const closeReportModal = document.getElementById('closeReportModal');
        const closeReportBtn = document.getElementById('closeReportBtn');

        // Toggle dropdown menu when clicking on seller image
        sellerImage.addEventListener('click', function(event) {
            event.stopPropagation();
            sellerOptions.classList.toggle('hidden');
        });

        // Close dropdown when clicking elsewhere
        document.addEventListener('click', function() {
            sellerOptions.classList.add('hidden');
        });

        // Prevent dropdown from closing when clicking inside it
        sellerOptions.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Open profile modal when clicking "Profile" option
        viewProfileBtn.addEventListener('click', function(event) {
            event.preventDefault();
            sellerOptions.classList.add('hidden');
            sellerProfileModal.classList.remove('hidden');
        });

        // Open report modal when clicking "Report" option
        reportSellerBtn.addEventListener('click', function(event) {
            event.preventDefault();
            sellerOptions.classList.add('hidden');
            reportSellerModal.classList.remove('hidden');
        });

        // Close profile modal
        closeProfileModal.addEventListener('click', function() {
            sellerProfileModal.classList.add('hidden');
        });

        // Close report modal
        closeReportModal.addEventListener('click', function() {
            reportSellerModal.classList.add('hidden');
        });

        closeReportBtn.addEventListener('click', function() {
            reportSellerModal.classList.add('hidden');
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === sellerProfileModal) {
                sellerProfileModal.classList.add('hidden');
            }
            if (event.target === reportSellerModal) {
                reportSellerModal.classList.add('hidden');
            }
            if (event.target === chatModal) {
                chatModal.classList.add('hidden');
            }
        });

        $(document).ready(function() {
            // Check if property is already in compare list
            function checkCompareStatus() {
                $.ajax({
                    url: '@Url.Action("GetCompareList", "Home")',
                    type: 'GET',
                    success: function(response) {
                        if (response.properties && response.properties.includes('@Model.Id')) {
                            $('#addToCompareBtn').addClass('bg-green-600').removeClass('bg-blue-600');
                            $('#addToCompareBtn').html('<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> Added to Compare');
                        }

                        // Show compare count if any properties are in the list
                        if (response.count > 0) {
                            $('#compareCount').text(response.count).parent().removeClass('hidden');
                        }
                    }
                });
            }

            // Add to compare button click handler
            $('#addToCompareBtn').click(function() {
                $.ajax({
                    url: '@Url.Action("AddToCompare", "Home")',
                    type: 'POST',
                    data: { id: '@Model.Id' },
                    success: function(response) {
                        if (response.success) {
                            $('#addToCompareBtn').addClass('bg-green-600').removeClass('bg-blue-600');
                            $('#addToCompareBtn').html('<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> Added to Compare');

                            // Update compare count
                            $('#compareCount').text(response.count);
                            $('#compareCountContainer').removeClass('hidden');
                        } else {
                            alert(response.message || 'Error adding property to compare');
                        }
                    }
                });
            });

            // Check status on page load
            checkCompareStatus();
        });
    });
</script>

<style>
.similar-properties h3 {
    position: relative;
    padding-bottom: 10px;
    margin-bottom: 25px;
}

.similar-properties h3:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50px;
    height: 3px;
    background-color: #4a89dc;
}
    .map-control-btn {
        background-color: white;
        border: none;
        border-radius: 4px;
        padding: 6px;
        cursor: pointer;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 4px;
        font-size: 12px;
    }

        .map-control-btn:hover {
            background-color: #f9f9f9;
        }

        .map-control-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    #distanceInfo {
        background-color: white;
        padding: 8px;
        border-radius: 4px;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }


    @if (Model.Status == "Sold" && User.IsInRole("Buyer"))
    {
        <input type="hidden" id="currentPropertyId" value="@Model.Id" />
        <partial name="_RatingPromptPartial" />
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                checkRatingPrompt(document.getElementById('currentPropertyId').value);
            });
        </script>
    }
</style>