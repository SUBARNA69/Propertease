@model Propertease.Models.PropertyDetailsViewModel

@{
    // Assign the 3D Virtual Tour URL to a variable to avoid nested quote issues.
    var modelViewerUrl = Url.Action("ModelViewer", "Home", new { id = Model.Id });
}

<script src="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.10.0/mapbox-gl.css" rel="stylesheet">

<div class="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
    <div class="relative">
        @if (Model.ImageUrl.Any())
        {
            <img src="@Model.ImageUrl.First()" alt="@Model.Title" class="w-full h-64 object-cover">
        }
        else
        {
            <img src="https://via.placeholder.com/800x400" alt="Property Main Image" class="w-full h-64 object-cover">
        }

        <div class="absolute bottom-0 left-0 bg-black bg-opacity-50 text-white p-4">
            <h1 class="text-2xl font-bold">$@Model.Price</h1>
            <p class="text-sm">@Model.City, @Model.District, @Model.Province</p>
        </div>
    </div>

    <div class="p-6">
        @if (!string.IsNullOrEmpty(Model.ThreeDModel))
        {
            <a href="@modelViewerUrl" class="text-white bg-purple-700 hover:bg-purple-800 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-purple-600 dark:hover:bg-purple-700 focus:outline-none dark:focus:ring-purple-800">
                <svg class="w-4 h-4 inline-block mr-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 20">
                    <path d="M8 0a8 8 0 0 0-8 8 8.034 8.034 0 0 0 1.014 3.9.5.5 0 0 0 .131.172l.414.42 7.067 7.069a.5.5 0 0 0 .707 0l7.067-7.069.414-.42a.5.5 0 0 0 .131-.172A8.034 8.034 0 0 0 16 8a8 8 0 0 0-8-8Zm0 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z" />
                </svg>
                View 3D Virtual Tour
            </a>
        }

        <div class="text-gray-600 space-y-2">
            <p>📍 Location: @Model.City, @Model.District, @Model.Province</p>
            <p>📘 Road Access: @Model.RoadAccess</p>

            @if (Model.PropertyType == "House")
            {
                <p>🏠 House - @Model.Bedrooms Bedrooms, @Model.Bathrooms Bathrooms, @Model.Kitchens Kitchens</p>
                <p>📎 Area: @Model.LandArea sq ft</p>
                <p>📅 Built Year: @Model.BuiltYear</p>
            }
            else if (Model.PropertyType == "Apartment")
            {
                <p>🏢 Apartment - @Model.Rooms Rooms, @Model.Bathrooms Bathrooms, @Model.Kitchens Kitchens</p>
                <p>📎 Room Size: @Model.RoomSize sq ft</p>
            }
            else if (Model.PropertyType == "Land")
            {
                <p>🌍 Land - @Model.LandType, Soil Quality: @Model.SoilQuality</p>
                <p>📎 Land Area: @Model.LandArea sq ft</p>
            }
        </div>

        <p class="mt-4 text-gray-700">@Model.Description</p>

        <div class="mt-6">
            <h2 class="text-lg font-semibold">Map View</h2>
            <div id="mapContainer" class="relative mt-2">
                <div id="map" class="h-48 bg-gray-200 rounded-lg"></div>
                <!-- Map Control Buttons -->
                <div class="absolute top-2 right-2 flex flex-col gap-2 z-10">
                    <button id="fullscreenBtn" class="map-control-btn bg-white p-1.5 rounded shadow-sm hover:bg-gray-100 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3"></path><path d="M21 8V5a2 2 0 0 0-2-2h-3"></path><path d="M3 16v3a2 2 0 0 0 2 2h3"></path><path d="M16 21h3a2 2 0 0 0 2-2v-3"></path></svg>
                    </button>
                    <button id="showDistanceBtn" class="map-control-btn bg-white p-1.5 rounded shadow-sm hover:bg-gray-100 flex items-center gap-1">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg>
                        <span class="text-xs">Show Distance</span>
                    </button>
                </div>
                <!-- Distance Info Panel -->
                <div id="distanceInfo" class="hidden absolute bottom-2 left-2 bg-white p-2 rounded shadow-md z-10">
                    <div class="text-sm font-medium">Distance: <span id="distanceValue">-</span></div>
                    <div class="text-sm font-medium">Driving time: <span id="durationValue">-</span></div>
                </div>
            </div>
        </div>

        <div class="mt-6 flex items-center space-x-4">
            <div class="flex-shrink-0 relative" id="sellerProfileContainer">
                @if (!string.IsNullOrEmpty(Model.SellerImage))
                {
                    <img src="~/Images/@Model.SellerImage" alt="@Model.SellerName" class="h-12 w-12 rounded-full cursor-pointer" id="sellerImage">
                }
                else
                {
                    <img src="https://via.placeholder.com/50" alt="@Model.SellerName" class="h-12 w-12 rounded-full cursor-pointer" id="sellerImage">
                }
                <!-- Dropdown menu for seller profile options -->
                <div id="sellerOptions" class="absolute left-0 mt-2 w-36 bg-white rounded-md shadow-lg z-10 hidden">
                    <ul class="py-1">
                        <li><a href="#" id="viewProfileBtn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Profile</a></li>
                        <li><a href="#" id="reportSellerBtn" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Report</a></li>
                    </ul>
                </div>
            </div>
            <div>
                <h3 class="text-lg font-semibold">@Model.SellerName</h3>
                <p class="text-gray-600">📘 @Model.SellerContact</p>

                <!-- Add seller rating display -->
                <div class="flex items-center mt-1">
                    <div class="flex items-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Round(Model.SellerAverageRating))
                            {
                                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-4 h-4 text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                        }
                    </div>
                    <span class="ml-1 text-xs text-gray-500">(@Model.SellerAverageRating.ToString("F1")) from @Model.SellerTotalRatings reviews</span>
                </div>
            </div>
        </div>

        <div class="mt-6 flex space-x-4">
            <button id="contactAgentBtn" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700">Contact Agent</button>
            <button id="scheduleViewingBtn" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700">Schedule Viewing</button>
            <button id="predictPriceBtn" class="text-white bg-purple-600 hover:bg-purple-700 focus:ring-4 focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                See Predicted Price
            </button>
            <!-- Add this button to your Details.cshtml view, next to the "Predict Price" button -->
            <button id="addToCompareBtn" class="text-white bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 focus:outline-none">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                Add to Compare
            </button>
            <div id="compareCountContainer" class="hidden mb-4">
                <a href="@Url.Action("CompareProperties", "Home")" class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                    Compare (<span id="compareCount">0</span>) properties
                </a>
            </div>
        </div>
    </div>
</div>
<!-- Prediction Modal -->
<div id="predictionModal" tabindex="-1" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 w-full md:inset-0 h-modal md:h-full justify-center items-center">
    <div class="relative p-4 w-full max-w-md h-full md:h-auto">
        <!-- Modal content -->
        <div class="relative bg-white rounded-lg shadow">
            <!-- Modal header -->
            <div class="flex justify-between items-start p-4 rounded-t border-b">
                <h3 class="text-xl font-semibold text-gray-900">
                    <svg class="w-6 h-6 inline mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                    AI Price Prediction
                </h3>
                <button id="closePredictionModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            <!-- Modal body -->
            <div class="p-6 space-y-4">
                <div id="predictionResult" class="text-center">
                    <div role="status" id="loadingSpinner" class="flex justify-center">
                        <svg aria-hidden="true" class="w-8 h-8 mr-2 text-gray-200 animate-spin fill-purple-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                        </svg>
                        <span class="sr-only">Loading...</span>
                    </div>
                    <p id="predictionText" class="text-gray-700 mb-4"></p>

                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div class="p-4 bg-gray-50 rounded-lg">
                            <p class="text-sm font-medium text-gray-500">Listed Price</p>
                            <p class="text-xl font-bold">$@Model.Price.ToString("N0")</p>
                        </div>
                        <div class="p-4 bg-purple-50 rounded-lg">
                            <p class="text-sm font-medium text-purple-600">Predicted Price</p>
                            <p id="predictedPriceValue" class="text-xl font-bold text-purple-600"></p>
                        </div>
                    </div>

                    <div id="predictionInsight" class="p-4 bg-blue-50 rounded-lg text-left">
                        <h4 class="font-medium text-blue-800 mb-2">AI Insight</h4>
                        <p id="predictionNote" class="text-sm text-blue-700"></p>
                    </div>
                </div>
            </div>
            <!-- Modal footer -->
            <div class="flex items-center p-6 space-x-2 rounded-b border-t border-gray-200">
                <button id="closePredictionModalBtn" type="button" class="text-white bg-purple-600 hover:bg-purple-700 focus:ring-4 focus:outline-none focus:ring-purple-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center">Close</button>
                <button id="learnMoreBtn" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10">Learn More</button>
            </div>
        </div>
    </div>
</div>
<!-- Schedule Viewing Modal -->
<div id="scheduleViewingModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-gray-900">Schedule Property Viewing</h3>
            <div class="mt-2 px-7 py-3">
                <form action="@Url.Action("ScheduleViewing", "Home")" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="PropertyId" value="@Model.Id" />
                    <input type="hidden" name="Status" value="Pending" />

                    <div class="mb-4">
                        <label for="buyerName" class="block text-gray-700 text-sm font-bold mb-2">Your Name</label>
                        <input type="text" id="buyerName" name="BuyerName" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                    </div>

                    <div class="mb-4">
                        <label for="buyerEmail" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                        <input type="email" id="buyerEmail" name="BuyerEmail" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                    </div>

                    <div class="mb-4">
                        <label for="buyerContact" class="block text-gray-700 text-sm font-bold mb-2">Contact Number</label>
                        <input type="tel" id="buyerContact" name="BuyerContact" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                    </div>

                    <div class="mb-4">
                        <label for="viewingDate" class="block text-gray-700 text-sm font-bold mb-2">Preferred Date</label>
                        <input type="date" id="viewingDate" name="ViewingDate" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required min="@DateTime.Now.ToString("yyyy-MM-dd")">
                    </div>

                    <div class="mb-4">
                        <label for="viewingTime" class="block text-gray-700 text-sm font-bold mb-2">Preferred Time</label>
                        <select id="viewingTime" name="ViewingTime" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" required>
                            <option value="">Select Time</option>
                            <option value="09:00">9:00 AM</option>
                            <option value="10:00">10:00 AM</option>
                            <option value="11:00">11:00 AM</option>
                            <option value="12:00">12:00 PM</option>
                            <option value="13:00">1:00 PM</option>
                            <option value="14:00">2:00 PM</option>
                            <option value="15:00">3:00 PM</option>
                            <option value="16:00">4:00 PM</option>
                            <option value="17:00">5:00 PM</option>
                        </select>
                    </div>

                    <div class="mb-4">
                        <label for="notes" class="block text-gray-700 text-sm font-bold mb-2">Additional Notes</label>
                        <textarea id="notes" name="Notes" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" rows="3"></textarea>
                    </div>

                    <div class="flex items-center justify-between mt-4">
                        <button type="button" id="closeModal" class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">Cancel</button>
                        <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">Submit Request</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Seller Profile Modal -->
<div id="sellerProfileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center border-b pb-3">
            <h3 class="text-xl font-medium text-gray-900">Seller Profile</h3>
            <button type="button" id="closeProfileModal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
        <div class="mt-4 max-h-[70vh] overflow-y-auto">
            <div class="flex items-center space-x-4 mb-4">
                <div class="flex-shrink-0">
                    @if (!string.IsNullOrEmpty(Model.SellerImage))
                    {
                        <img src="~/Images/@Model.SellerImage" alt="@Model.SellerName" class="h-20 w-20 rounded-full">
                    }
                    else
                    {
                        <img src="https://via.placeholder.com/80" alt="@Model.SellerName" class="h-20 w-20 rounded-full">
                    }
                </div>
                <div>
                    <h4 class="text-xl font-bold">@Model.SellerName</h4>
                    <p class="text-gray-600">Member since @Model.CreatedAt</p>
                </div>
            </div>

            <div class="mb-4">
                <h5 class="font-semibold text-lg mb-2">Contact Information</h5>
                <p class="text-gray-700">📱 Phone: @Model.SellerContact</p>
                <p class="text-gray-700">📧 Email: @Model.SellerEmail</p>
            </div>

            <div class="mb-4">
                <h5 class="font-semibold text-lg mb-2">Ratings & Reviews</h5>
                <div class="flex items-center mb-2">
                    <div class="flex items-center">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= Math.Round(Model.SellerAverageRating))
                            {
                                <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-5 h-5 text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            }
                        }
                        <span class="ml-2 text-gray-600">@Model.SellerAverageRating.ToString("F1") out of 5</span>
                    </div>
                </div>
                <p class="text-sm text-gray-600 mb-3">Based on @Model.SellerTotalRatings reviews</p>

                <!-- Rating distribution bars -->
                @if (Model.SellerTotalRatings > 0)
                {
                    <div class="space-y-2 mb-4">
                        @for (int i = 5; i >= 1; i--)
                        {
                            var count = Model.SellerReviews?.Count(r => r.Rating == i) ?? 0;
                            var percentage = Model.SellerTotalRatings > 0 ? (count * 100) / Model.SellerTotalRatings : 0;

                            <div class="flex items-center text-sm">
                                <span class="w-8 text-gray-600">@i star</span>
                                <div class="w-48 h-2 mx-2 bg-gray-200 rounded">
                                    <div class="h-2 bg-yellow-400 rounded" style="width: @percentage%"></div>
                                </div>
                                <span class="text-gray-600">@count</span>
                            </div>
                        }
                    </div>
                }

                <!-- Recent reviews -->
                @if (Model.SellerReviews != null && Model.SellerReviews.Any())
                {
                    <div class="space-y-3 mt-4">
                        <h6 class="font-medium text-gray-700">Recent Reviews</h6>
                        @foreach (var review in Model.SellerReviews)
                        {
                            <div class="border-t pt-3">
                                <div class="flex justify-between items-start">
                                    <div>
                                        <p class="font-medium text-gray-800">@review.BuyerName</p>
                                        <div class="flex items-center mt-1">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= review.Rating)
                                                {
                                                    <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                                    </svg>
                                                }
                                                else
                                                {
                                                    <svg class="w-4 h-4 text-gray-300" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                                    </svg>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <span class="text-xs text-gray-500">@review.CreatedAt.ToString("MMM dd, yyyy")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(review.Review))
                                {
                                    <p class="text-gray-600 text-sm mt-2">@review.Review</p>
                                }
                            </div>
                        }

                        @if (Model.SellerTotalRatings > 3)
                        {
                            <div class="text-center mt-2">
                                <a href="#" class="text-blue-600 hover:text-blue-800 text-sm">View all @Model.SellerTotalRatings reviews</a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-gray-600 text-sm italic">No reviews yet</p>
                }
            </div>

            <div class="mb-4">
                <h5 class="font-semibold text-lg mb-2">Past Properties</h5>
                @if (Model.SellerPastProperties != null && Model.SellerPastProperties.Any())
                {
                    <div class="grid grid-cols-2 gap-3">
                        @foreach (var property in Model.SellerPastProperties)
                        {
                            <a href="@Url.Action("Details", "Home", new { id = property.Id })" class="block border rounded-md overflow-hidden hover:shadow-md transition-shadow">
                                <div class="relative">
                                    <img src="@property.ImageUrl" alt="@property.Title" class="w-full h-24 object-cover">
                                    @if (property.Status == "Sold")
                                    {
                                        <div class="absolute top-0 right-0 bg-red-500 text-white text-xs px-2 py-1 m-1 rounded">Sold</div>
                                    }
                                </div>
                                <div class="p-2">
                                    <p class="text-sm font-medium line-clamp-1">@property.Title</p>
                                    <p class="text-xs text-gray-600">$@property.Price.ToString("N0")</p>
                                    <p class="text-xs text-gray-500">Listed: @property.ListedDate</p>
                                </div>
                            </a>
                        }
                    </div>

                    <div class="text-center mt-3">
                        <a href="#" class="text-blue-600 hover:text-blue-800 text-sm">View all properties by this seller</a>
                    </div>
                }
                else
                {
                    <p class="text-gray-600 text-sm italic">No other properties listed by this seller</p>
                }
            </div>

            <div class="mt-6">
                <button type="button" id="profileContactBtn" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Contact Seller</button>
            </div>
        </div>
    </div>
</div>

<!-- Report Seller Modal (Placeholder - not implemented yet) -->
<div id="reportSellerModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="flex justify-between items-center border-b pb-3">
            <h3 class="text-xl font-medium text-gray-900">Report Seller</h3>
            <button type="button" id="closeReportModal" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>
        <div class="mt-4 text-center">
            <p class="text-gray-700">Report functionality will be implemented in the future.</p>
            <button type="button" id="closeReportBtn" class="mt-4 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">Close</button>
        </div>
    </div>
</div>

<!-- Chat Modal - Add this at the bottom of your existing details page -->
<div id="chatModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-0 border w-full max-w-md shadow-lg rounded-md bg-white">
        <!-- Chat Header -->
        <div class="flex justify-between items-center bg-blue-600 text-white p-4 rounded-t-md">
            <div class="flex items-center space-x-3">
                @if (!string.IsNullOrEmpty(Model.SellerImage))
                {
                    <img src="~/Images/@Model.SellerImage" alt="@Model.SellerName" class="h-10 w-10 rounded-full">
                }
                else
                {
                    <img src="https://via.placeholder.com/40" alt="@Model.SellerName" class="h-10 w-10 rounded-full">
                }
                <div>
                    <h3 class="font-medium">@Model.SellerName</h3>
                    <p class="text-xs">@Model.Title</p>
                </div>
            </div>
            <button type="button" id="closeChatModal" class="text-white hover:bg-blue-700 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>

        <!-- Chat Messages Container -->
        <div id="chatMessages" class="h-80 overflow-y-auto p-4 bg-gray-50">
            <!-- Messages will appear here dynamically -->
        </div>

        <!-- Chat Input Form - THIS IS THE FORM WE'REFERENCING -->
        <div class="border-t p-4">
            <form id="chatForm" class="flex items-center">
                @Html.AntiForgeryToken()
                <input type="hidden" id="sellerId" name="sellerId" value="@Model.SellerId">
                <input type="text" id="messageInput" name="message"
                       placeholder="Type your message..."
                       class="flex-1 border rounded-l-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
                       maxlength="500">
                <button type="submit" class="bg-blue-600 text-white rounded-r-lg px-4 py-2 hover:bg-green-700">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                    </svg>
                </button>
            </form>
            <div class="flex justify-between mt-2 text-xs text-gray-500">
                <span>Press Enter to send</span>
                <span id="typingIndicator" class="hidden">Sending...</span>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
        // Mapbox initialization
        mapboxgl.accessToken = 'pk.eyJ1Ijoia3Jvc3NzdWJhcm5hIiwiYSI6ImNtN3NteGp5ajE2dWgyanNibHNxc2o5YXcifQ.GSxJY20oRcqu6qnF154OEg';

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [@Model.Longitude, @Model.Latitude],
            zoom: 12
        });

        // Add navigation controls
        map.addControl(new mapboxgl.NavigationControl());

        // Add property marker
        new mapboxgl.Marker()
            .setLngLat([@Model.Longitude, @Model.Latitude])
            .addTo(map);

        // Map enhancement features
        const mapContainer = document.getElementById('mapContainer');
        const mapElement = document.getElementById('map');
        const fullscreenBtn = document.getElementById('fullscreenBtn');
        const showDistanceBtn = document.getElementById('showDistanceBtn');
        const distanceInfo = document.getElementById('distanceInfo');
        const distanceValue = document.getElementById('distanceValue');
        const durationValue = document.getElementById('durationValue');

        let isFullscreen = false;
        let routeShown = false;
        let userMarker = null;

        // Toggle fullscreen
        fullscreenBtn.addEventListener('click', function() {
            isFullscreen = !isFullscreen;

            if (isFullscreen) {
                // Make map fullscreen
                mapContainer.style.position = 'fixed';
                mapContainer.style.top = '0';
                mapContainer.style.left = '0';
                mapContainer.style.width = '100%';
                mapContainer.style.height = '100%';
                mapContainer.style.zIndex = '9999';
                mapContainer.style.backgroundColor = 'white';
                mapElement.style.height = '100%';
                mapElement.style.borderRadius = '0';

                // Change icon to minimize
                fullscreenBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3v3a2 2 0 0 1-2 2H3"></path><path d="M21 8h-3a2 2 0 0 1-2-2V3"></path><path d="M3 16h3a2 2 0 0 1 2 2v3"></path><path d="M16 21v-3a2 2 0 0 1 2-2h3"></path></svg>';
            } else {
                // Restore original size
                mapContainer.style.position = 'relative';
                mapContainer.style.top = 'auto';
                mapContainer.style.left = 'auto';
                mapContainer.style.width = '100%';
                mapContainer.style.height = 'auto';
                mapContainer.style.zIndex = '1';
                mapContainer.style.backgroundColor = 'transparent';
                mapElement.style.height = '48px';
                mapElement.style.borderRadius = '0.5rem';

                // Change icon back to expand
                fullscreenBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3"></path><path d="M21 8V5a2 2 0 0 0-2-2h-3"></path><path d="M3 16v3a2 2 0 0 0 2 2h3"></path><path d="M16 21h3a2 2 0 0 0 2-2v-3"></path></svg>';
            }

            // Resize map after DOM changes
            setTimeout(function() {
                map.resize();
            }, 100);
        });

        // Show distance functionality
        showDistanceBtn.addEventListener('click', function() {
            if (routeShown) {
                // Remove existing route and markers
                if (userMarker) userMarker.remove();
                if (map.getLayer('route')) map.removeLayer('route');
                if (map.getSource('route')) map.removeSource('route');
                distanceInfo.classList.add('hidden');

                routeShown = false;
                showDistanceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg> <span class="text-xs">Show Distance</span>';
                return;
            }

            // Request user location
            if (navigator.geolocation) {
                showDistanceBtn.disabled = true;
                showDistanceBtn.innerHTML = '<span class="text-xs">Loading...</span>';

                navigator.geolocation.getCurrentPosition(
                    function(position) {
                        const userCoords = [position.coords.longitude, position.coords.latitude];

                        // Add user location marker
                        userMarker = new mapboxgl.Marker({ color: '#3887be' })
                            .setLngLat(userCoords)
                            .setPopup(new mapboxgl.Popup({ offset: 25 }).setText('Your Location'))
                            .addTo(map);

                        // Get directions from Mapbox Directions API
                        fetch(`https://api.mapbox.com/directions/v5/mapbox/driving/${userCoords[0]},${userCoords[1]};${@Model.Longitude},${@Model.Latitude}?steps=true&geometries=geojson&access_token=${mapboxgl.accessToken}`)
                            .then(response => response.json())
                            .then(data => {
                                if (!data.routes || data.routes.length === 0) {
                                    throw new Error('No route found');
                                }

                                const route = data.routes[0];

                                // Calculate distance and duration
                                const distanceInKm = (route.distance / 1000).toFixed(1);
                                const durationInMinutes = Math.round(route.duration / 60);

                                // Display distance information
                                distanceValue.textContent = `${distanceInKm} km`;
                                durationValue.textContent = `${durationInMinutes} min`;
                                distanceInfo.classList.remove('hidden');

                                // Add route to map
                                map.addSource('route', {
                                    type: 'geojson',
                                    data: {
                                        type: 'Feature',
                                        properties: {},
                                        geometry: route.geometry
                                    }
                                });

                                map.addLayer({
                                    id: 'route',
                                    type: 'line',
                                    source: 'route',
                                    layout: {
                                        'line-join': 'round',
                                        'line-cap': 'round'
                                    },
                                    paint: {
                                        'line-color': '#3887be',
                                        'line-width': 5,
                                        'line-opacity': 0.75
                                    }
                                });

                                // Fit map to show both points
                                const bounds = new mapboxgl.LngLatBounds();
                                bounds.extend(userCoords);
                                bounds.extend([@Model.Longitude, @Model.Latitude]);

                                map.fitBounds(bounds, {
                                    padding: 50,
                                    maxZoom: 15
                                });

                                routeShown = true;
                                showDistanceBtn.disabled = false;
                                showDistanceBtn.innerHTML = '<span class="text-xs">Hide Route</span>';
                            })
                            .catch(error => {
                                console.error('Error getting directions:', error);
                                alert('Unable to calculate directions. Please try again later.');
                                showDistanceBtn.disabled = false;
                                showDistanceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg> <span class="text-xs">Show Distance</span>';
                            });
                    },
                    function(error) {
                        console.error('Error getting location:', error);
                        let errorMessage = 'Unable to get your location.';

                        switch(error.code) {
                            case error.PERMISSION_DENIED:
                                errorMessage += ' Please allow location access.';
                                break;
                            case error.POSITION_UNAVAILABLE:
                                errorMessage += ' Location information is unavailable.';
                                break;
                            case error.TIMEOUT:
                                errorMessage += ' The request timed out.';
                                break;
                        }

                        alert(errorMessage);
                        showDistanceBtn.disabled = false;
                        showDistanceBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg> <span class="text-xs">Show Distance</span>';
                    },
                    {
                        enableHighAccuracy: true,
                        timeout: 5000,
                        maximumAge: 0
                    }
                );
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        });

        // Schedule Viewing Modal
        const modal = document.getElementById('scheduleViewingModal');
        const openModalBtn = document.getElementById('scheduleViewingBtn');
        const closeModalBtn = document.getElementById('closeModal');

        // Open modal and fetch user data
        openModalBtn.addEventListener('click', function() {
            modal.classList.remove('hidden');

            // Fetch buyer details if user is logged in
            fetch('/Home/GetBuyerDetails')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('buyerName').value = data.name || '';
                        document.getElementById('buyerEmail').value = data.email || '';
                        document.getElementById('buyerContact').value = data.contactNumber || '';
                    }
                })
                .catch(error => console.error('Error fetching buyer details:', error));
        });

        // Close modal when clicking the close button
        closeModalBtn.addEventListener('click', function() {
            modal.classList.add('hidden');
        });

        // Close modal when clicking outside of the modal content
        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.classList.add('hidden');
            }
        });

        // Seller Profile Functionality
        const sellerImage = document.getElementById('sellerImage');
        const sellerOptions = document.getElementById('sellerOptions');
        const sellerProfileModal = document.getElementById('sellerProfileModal');
        const reportSellerModal = document.getElementById('reportSellerModal');
        const viewProfileBtn = document.getElementById('viewProfileBtn');
        const reportSellerBtn = document.getElementById('reportSellerBtn');
        const closeProfileModal = document.getElementById('closeProfileModal');
        const closeReportModal = document.getElementById('closeReportModal');
        const closeReportBtn = document.getElementById('closeReportBtn');

        // Toggle dropdown menu when clicking on seller image
        sellerImage.addEventListener('click', function(event) {
            event.stopPropagation();
            sellerOptions.classList.toggle('hidden');
        });

        // Close dropdown when clicking elsewhere
        document.addEventListener('click', function() {
            sellerOptions.classList.add('hidden');
        });

        // Prevent dropdown from closing when clicking inside it
        sellerOptions.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        // Open profile modal when clicking "Profile" option
        viewProfileBtn.addEventListener('click', function(event) {
            event.preventDefault();
            sellerOptions.classList.add('hidden');
            sellerProfileModal.classList.remove('hidden');
        });

        // Open report modal when clicking "Report" option
        reportSellerBtn.addEventListener('click', function(event) {
            event.preventDefault();
            sellerOptions.classList.add('hidden');
            reportSellerModal.classList.remove('hidden');
        });

        // Close profile modal
        closeProfileModal.addEventListener('click', function() {
            sellerProfileModal.classList.add('hidden');
        });

        // Close report modal
        closeReportModal.addEventListener('click', function() {
            reportSellerModal.classList.add('hidden');
        });

        closeReportBtn.addEventListener('click', function() {
            reportSellerModal.classList.add('hidden');
        });

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === sellerProfileModal) {
                sellerProfileModal.classList.add('hidden');
            }
            if (event.target === reportSellerModal) {
                reportSellerModal.classList.add('hidden');
            }
            if (event.target === chatModal) {
                chatModal.classList.add('hidden');
            }
        });

         const chatModal = document.getElementById('chatModal');
    document.getElementById('contactAgentBtn').addEventListener('click', () => {
        chatModal.classList.remove('hidden');
        document.getElementById('messageInput').focus();
    });

    document.getElementById('closeChatModal').addEventListener('click', () => {
        chatModal.classList.add('hidden');
    });

    // Chat Form Submission
    document.getElementById('chatForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const message = formData.get('message').trim();
        const typingIndicator = document.getElementById('typingIndicator');

        if (!message) return;

        try {
            typingIndicator.classList.remove('hidden');

            // Optimistic UI Update - show message immediately
            addMessageToChat(message, true);
            form.reset();

            // Send to server
            const response = await fetch('/Home/ContactSeller', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            });

            const data = await response.json();

            if (!response.ok || !data.success) {
                throw new Error(data.message || 'Failed to send message');
            }

            typingIndicator.textContent = "Sent!";
            setTimeout(() => typingIndicator.classList.add('hidden'), 2000);

        } catch (error) {
            console.error('Error:', error);
            typingIndicator.textContent = error.message;
            setTimeout(() => typingIndicator.classList.add('hidden'), 3000);
        }
    });

    // Helper function to add messages to chat
    function addMessageToChat(content, isBuyer) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');

        messageDiv.className = `flex ${isBuyer ? 'justify-end' : 'justify-start'} mb-4`;
        messageDiv.innerHTML = `
            <div class="${isBuyer ? 'bg-blue-100' : 'bg-white'} rounded-lg py-2 px-3 max-w-[75%] shadow-sm">
                <p class="text-sm">${content}</p>
                <p class="text-xs text-gray-500 mt-1">${new Date().toLocaleTimeString()}</p>
            </div>
        `;

        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
        // Price Prediction Functionality
    document.addEventListener('DOMContentLoaded', function() {
        const predictPriceBtn = document.getElementById('predictPriceBtn');
        const predictionModal = document.getElementById('predictionModal');
        const closePredictionModal = document.getElementById('closePredictionModal');
        const closePredictionModalBtn = document.getElementById('closePredictionModalBtn');
        const predictionText = document.getElementById('predictionText');
        const predictedPriceValue = document.getElementById('predictedPriceValue');
        const predictionNote = document.getElementById('predictionNote');
        const loadingSpinner = document.getElementById('loadingSpinner');
        const predictionResult = document.getElementById('predictionResult');
        const predictionInsight = document.getElementById('predictionInsight');

        // Check if all elements exist to prevent null reference errors
        if (!predictPriceBtn || !predictionModal || !closePredictionModal ||
            !closePredictionModalBtn || !predictionText || !predictedPriceValue ||
            !predictionNote || !loadingSpinner || !predictionResult || !predictionInsight) {
            console.error('One or more prediction elements not found in the DOM');
            return;
        }

        // Simple modal functionality instead of relying on Flowbite
        function showModal() {
            predictionModal.classList.remove('hidden');
        }

        function hideModal() {
            predictionModal.classList.add('hidden');
        }

        // Open prediction modal
        predictPriceBtn.addEventListener('click', async function() {
            showModal();
            loadingSpinner.classList.remove('hidden');
            predictionText.textContent = 'Analyzing property features with our AI model...';
            predictedPriceValue.textContent = '';
            predictionNote.textContent = '';
            predictionInsight.classList.add('hidden');

            try {
                // IMPORTANT: Fix the parameter name to match your controller action
                const response = await fetch(`/Home/PredictPrice?propertyId=@Model.Id`);

                // Check if the request was successful
                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('API error:', response.status, errorText);
                    throw new Error(`Server error: ${response.status}`);
                }

                const data = await response.json();

                if (!data.success) {
                    throw new Error(data.message || 'Failed to predict price');
                }

                // Validate the prediction value
                if (typeof data.predictedPrice !== 'number' ||
                    isNaN(data.predictedPrice) ||
                    !isFinite(data.predictedPrice) ||
                    data.predictedPrice <= 0) {
                    throw new Error('Invalid prediction value received');
                }

                loadingSpinner.classList.add('hidden');
                predictionText.textContent = 'Our AI model predicts this property is worth:';
                predictedPriceValue.textContent = `$${data.predictedPrice.toLocaleString('en-US', {maximumFractionDigits: 0})}`;

                // Add some analysis based on the prediction
                const priceDifference = data.predictedPrice - @Model.Price;
                const percentageDiff = (Math.abs(priceDifference) / @Model.Price) * 100;

                if (priceDifference > 0) {
                    predictionNote.textContent = `The predicted value is ${percentageDiff.toFixed(1)}% higher than the asking price. This suggests the property may be undervalued.`;
                } else if (priceDifference < 0) {
                    predictionNote.textContent = `The predicted value is ${percentageDiff.toFixed(1)}% lower than the asking price. Consider negotiating or reviewing comparable properties.`;
                } else {
                    predictionNote.textContent = 'The predicted price matches the listed price exactly, suggesting it\'s fairly valued.';
                }

                predictionInsight.classList.remove('hidden');

            } catch (error) {
                console.error('Prediction error:', error);
                loadingSpinner.classList.add('hidden');
                predictionText.textContent = 'Error generating prediction';
                predictionNote.textContent = `Our AI model encountered an error: ${error.message}. Please try again later or contact support.`;
                predictionInsight.classList.remove('hidden');
            }
        });

        // Close prediction modal
        [closePredictionModal, closePredictionModalBtn].forEach(btn => {
            btn.addEventListener('click', function() {
                hideModal();
            });
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === predictionModal) {
                hideModal();
            }
        });

        // Learn more button
        document.getElementById('learnMoreBtn')?.addEventListener('click', function() {
            window.open('/how-ai-pricing-works', '_blank');
        });
    });
     $(document).ready(function() {
            // Check if property is already in compare list
            function checkCompareStatus() {
                $.ajax({
                    url: '@Url.Action("GetCompareList", "Home")',
                    type: 'GET',
                    success: function(response) {
                        if (response.properties && response.properties.includes('@Model.Id')) {
                            $('#addToCompareBtn').addClass('bg-green-600').removeClass('bg-blue-600');
                            $('#addToCompareBtn').html('<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> Added to Compare');
                        }

                        // Show compare count if any properties are in the list
                        if (response.count > 0) {
                            $('#compareCount').text(response.count).parent().removeClass('hidden');
                        }
                    }
                });
            }

            // Add to compare button click handler
            $('#addToCompareBtn').click(function() {
                $.ajax({
                    url: '@Url.Action("AddToCompare", "Home")',
                    type: 'POST',
                    data: { id: '@Model.Id' },
                    success: function(response) {
                        if (response.success) {
                            $('#addToCompareBtn').addClass('bg-green-600').removeClass('bg-blue-600');
                            $('#addToCompareBtn').html('<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> Added to Compare');

                            // Update compare count
                            $('#compareCount').text(response.count);
                            $('#compareCountContainer').removeClass('hidden');
                        } else {
                            alert(response.message || 'Error adding property to compare');
                        }
                    }
                });
            });

            // Check status on page load
            checkCompareStatus();
        });
</script>

<style>
    /* Map control styles */
    .map-control-btn {
        background-color: white;
        border: none;
        border-radius: 4px;
        padding: 6px;
        cursor: pointer;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 4px;
        font-size: 12px;
    }

        .map-control-btn:hover {
            background-color: #f9f9f9;
        }

        .map-control-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    #distanceInfo {
        background-color: white;
        padding: 8px;
        border-radius: 4px;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }
</style>