@model IEnumerable<PropertyDetailsViewModel>

@{
    ViewData["Title"] = "Premium Boosted Properties";
    var favoritePropertyIds = (ViewBag.FavoritePropertyIds as List<int>) ?? new List<int>();
    var boostedPropertyIds = (ViewBag.BoostedPropertyIds as List<int>) ?? new List<int>();
}

<!-- Add Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    .property-card {
        transition: all 0.4s ease;
        border: 1px solid #e5e7eb;
    }

        .property-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            border-color: #93c5fd;
        }

    .image-hover {
        transition: transform 0.6s ease;
    }

    .property-card:hover .image-hover {
        transform: scale(1.08);
    }

    .property-features {
        display: flex;
        gap: 1rem;
        margin-top: 0.5rem;
        margin-bottom: 1rem;
    }

    .property-feature {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
        color: #6b7280;
    }

        .property-feature i {
            margin-right: 0.25rem;
        }

    /* Favorite button styles */
    .favorite-btn {
        transition: all 0.3s ease;
    }

        .favorite-btn:hover {
            transform: scale(1.2);
        }

    /* Badge boosted animation */
    .badge-boosted {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(14, 165, 233, 0.7);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(14, 165, 233, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(14, 165, 233, 0);
        }
    }

    /* Toast notification styles */
    .toast-notification {
        position: fixed;
        bottom: 1rem;
        right: 1rem;
        padding: 1rem;
        border-radius: 0.5rem;
        color: white;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        z-index: 50;
        opacity: 1;
        transition: opacity 0.5s ease;
    }

    .toast-success {
        background-color: #10b981;
    }

    .toast-error {
        background-color: #ef4444;
    }

    .toast-info {
        background-color: #3b82f6;
    }
</style>

<!-- CSRF Token for AJAX requests -->
@Html.AntiForgeryToken()

<!-- Hero Section -->
<div class="bg-gradient-to-r from-sky-400 to-blue-700 py-12">
    <div class="max-w-screen-xl mx-auto px-4">
        <div class="text-center">
            <span class="inline-block px-3 py-1 bg-white text-blue-800 rounded-full text-sm font-medium mb-3">Premium Selection</span>
            <h1 class="text-3xl font-bold bg-clip-text bg-gradient-to-r from-sky-500 to-blue-700 text-white sm:text-4xl mb-4">🚀 Boosted Properties</h1>
            <p class="text-lg text-white text-opacity-90 max-w-2xl mx-auto">Exclusive properties with premium features and prime locations</p>
        </div>
    </div>
</div>

<!-- Stats Section -->
<div class="py-8 bg-white">
    <div class="max-w-screen-xl mx-auto px-4">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                <h3 class="text-3xl font-bold text-sky-600 mb-1 counter" data-target="@ViewBag.TotalBoostedProperties">@ViewBag.TotalBoostedProperties</h3>
                <p class="text-gray-600">Boosted Properties</p>
            </div>
            <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                <h3 class="text-3xl font-bold text-sky-600 mb-1 counter" data-target="@ViewBag.BoostedHouseCount">@ViewBag.BoostedHouseCount</h3>
                <p class="text-gray-600">Houses</p>
            </div>
            <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                <h3 class="text-3xl font-bold text-sky-600 mb-1 counter" data-target="@ViewBag.BoostedApartmentCount">@ViewBag.BoostedApartmentCount</h3>
                <p class="text-gray-600">Apartments</p>
            </div>
            <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                <h3 class="text-3xl font-bold text-sky-600 mb-1 counter" data-target="@ViewBag.BoostedLandCount">@ViewBag.BoostedLandCount</h3>
                <p class="text-gray-600">Land Plots</p>
            </div>
        </div>
    </div>
</div>

<!-- Filter Section -->
<div class="py-8 bg-gray-50">
    <div class="max-w-screen-xl mx-auto px-4">
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
            <h2 class="text-xl font-bold mb-4 text-gray-900">Filter Boosted Properties</h2>

            <form id="filterForm" class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                    <label for="propertyType" class="block mb-2 text-sm font-medium text-gray-700">Property Type</label>
                    <select id="propertyType" name="propertyType" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3">
                        <option value="">All Types</option>
                        <option value="House">House</option>
                        <option value="Apartment">Apartment</option>
                        <option value="Land">Land</option>
                    </select>
                </div>

                <div>
                    <label for="district" class="block mb-2 text-sm font-medium text-gray-700">District</label>
                    <select id="district" name="district" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3">
                        <option value="">All Districts</option>
                        @foreach (var district in ViewBag.Districts)
                        {
                            <option value="@district">@district</option>
                        }
                    </select>
                </div>

                <div>
                    <label for="priceRange" class="block mb-2 text-sm font-medium text-gray-700">Price Range</label>
                    <select id="priceRange" name="priceRange" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3">
                        <option value="">Any Price</option>
                        <option value="0-100000">$0 - $100,000</option>
                        <option value="100000-300000">$100,000 - $300,000</option>
                        <option value="300000-500000">$300,000 - $500,000</option>
                        <option value="500000-1000000">$500,000 - $1,000,000</option>
                        <option value="1000000+">$1,000,000+</option>
                    </select>
                </div>

                <div class="md:col-span-3 flex flex-wrap gap-3">
                    <button type="button" id="applyFilters" class="bg-sky-600 hover:bg-sky-700 text-white font-medium rounded-lg text-sm px-5 py-2.5 transition-all duration-300">
                        <i class="fa-solid fa-filter mr-2"></i> Apply Filters
                    </button>
                    <button type="button" id="clearFilters" class="text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 transition-all duration-300">
                        Clear Filters
                    </button>
                </div>
            </form>
        </div>

        <!-- Sort Options -->
        <div class="flex flex-wrap justify-between items-center mb-6">
            <p class="text-gray-600 mb-4 md:mb-0">
                Showing <span id="propertyCount" class="font-semibold">@Model.Count()</span> boosted properties
            </p>
            <div class="flex items-center">
                <label for="sortOption" class="mr-2 text-sm font-medium text-gray-700">Sort by:</label>
                <select id="sortOption" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 p-2.5">
                    <option value="newest">Newest</option>
                    <option value="price-asc">Price: Low to High</option>
                    <option value="price-desc">Price: High to Low</option>
                </select>
            </div>
        </div>

        <!-- Properties Grid -->
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8" id="propertiesGrid">
            @foreach (var property in Model)
            {
                <div class="property-card bg-white rounded-xl overflow-hidden h-full"
                     data-type="@property.PropertyType"
                     data-district="@property.District"
                     data-price="@property.Price"
                     data-id="@property.Id">
                    <div class="relative overflow-hidden h-64">
                        @if (property.ImageUrl != null && property.ImageUrl.Any())
                        {
                            <img src="@property.ImageUrl.First()" alt="@property.Title" class="w-full h-full object-cover image-hover">
                        }
                        else
                        {
                            <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                                <span class="text-gray-500">No Image Available</span>
                            </div>
                        }
                        <div class="absolute top-4 right-5 badge-boosted bg-gradient-to-r from-sky-600 to-blue-600 text-white px-3 py-1 rounded-full text-sm font-medium flex items-center">
                            <i class="fa-solid fa-rocket mr-1"></i> Boosted
                        </div>
                        <div class="absolute bottom-4 left-4 flex gap-2">
                            <span class="bg-black bg-opacity-60 text-white text-xs font-medium px-2.5 py-1 rounded-lg">
                                <i class="fa-solid fa-camera mr-1"></i> @(property.ImageUrl?.Count() ?? 0) Photos
                            </span>
                            @if (!string.IsNullOrEmpty(property.ThreeDModel))
                            {
                                <span class="bg-purple-600 bg-opacity-80 text-white text-xs font-medium px-2.5 py-1 rounded-lg">
                                    <i class="fa-solid fa-cube mr-1"></i> 3D Tour
                                </span>
                            }
                        </div>
                    </div>

                    <div class="p-6">
                        <div class="flex items-center justify-between mb-3">
                            <div>

                            <span class="bg-sky-100 text-sky-800 text-xs font-medium py-0.5 rounded-full">@property.PropertyType</span>
                            <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full ml-2">For Sale</span>
                            </div>
                            <button type="button"
                                    class="favorite-btn p-2 rounded-full transition-colors duration-300"
                                    onclick="toggleFavorite(@property.Id, this)">
                                <i class="fa-heart @(favoritePropertyIds.Contains(property.Id) ? "fa-solid text-red-500" : "fa-regular")"></i>
                            </button>
                        </div>

                        <h3 class="text-xl font-bold text-gray-800 mb-2 hover:text-sky-600 transition-colors duration-300">@property.Title</h3>

                        <div class="flex items-center text-gray-500 mb-3">
                            <i class="fa-solid fa-location-dot mr-2"></i>
                            <span>@property.District, @property.City</span>
                        </div>

                        <div class="property-features">
                            @if (property.PropertyType == "House")
                            {
                                <div class="property-feature">
                                    <i class="fa-solid fa-bed"></i>
                                    <span>@(property.Bedrooms ?? 0) Beds</span>
                                </div>
                                <div class="property-feature">
                                    <i class="fa-solid fa-bath"></i>
                                    <span>@(property.Bathrooms ?? 0) Baths</span>
                                </div>
                                <div class="property-feature">
                                    <i class="fa-solid fa-ruler-combined"></i>
                                    <span>@(property.BuildupArea ?? 0) sq.ft</span>
                                </div>
                            }
                            else if (property.PropertyType == "Apartment")
                            {
                                <div class="property-feature">
                                    <i class="fa-solid fa-bed"></i>
                                    <span>@(property.Rooms ?? 0) Rooms</span>
                                </div>
                                <div class="property-feature">
                                    <i class="fa-solid fa-bath"></i>
                                    <span>@(property.Bathrooms ?? 0) Baths</span>
                                </div>
                                <div class="property-feature">
                                    <i class="fa-solid fa-ruler-combined"></i>
                                    <span>@(property.RoomSize ?? 0) sq.ft</span>
                                </div>
                            }
                            else if (property.PropertyType == "Land")
                            {
                                <div class="property-feature">
                                    <i class="fa-solid fa-mountain-sun"></i>
                                    <span>@(property.LandType ?? "Land")</span>
                                </div>
                                <div class="property-feature">
                                    <i class="fa-solid fa-ruler-combined"></i>
                                    <span>@(property.LandArea ?? 0) sq.ft</span>
                                </div>
                                <div class="property-feature">
                                    <i class="fa-solid fa-road"></i>
                                    <span>@property.RoadAccess</span>
                                </div>
                            }
                        </div>

                        <div class="pt-4 border-t border-gray-100 flex justify-between items-center">
                            <span class="text-2xl font-bold text-sky-600">Rs. @property.Price.ToString("N0")</span>
                            <div class="flex gap-2">
                                
                                <a href="@Url.Action("Details", "Home", new { id = property.Id })" class="bg-gradient-to-br from-sky-400 to-blue-500 hover:from-sky-400 hover:to-blue-600 text-white font-medium rounded-lg text-sm px-4 py-2 flex items-center transition-all duration-300">
                                    View Details <i class="fa-solid fa-arrow-right ml-2"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- No Results Message -->
        <div id="noResultsMessage" class="hidden p-12 text-center bg-white border border-gray-200 rounded-lg shadow-sm">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
            </svg>
            <h3 class="text-2xl font-semibold text-gray-900 mb-2">No Boosted Properties Found</h3>
            <p class="text-gray-500 mb-6">We couldn't find any boosted properties matching your criteria.</p>
            <button id="resetFiltersBtn" class="bg-sky-600 hover:bg-sky-700 text-white font-medium rounded-lg text-base px-6 py-3 transition-all duration-300">
                Reset Filters
            </button>
        </div>
    </div>
</div>

<!-- CTA Section -->
<section class="py-16 bg-gradient-to-r from-sky-500 to-blue-700 text-white">
    <div class="max-w-screen-xl mx-auto px-4 text-center">
        <h2 class="text-3xl font-bold mb-4">Want to Boost Your Property?</h2>
        <p class="text-white text-opacity-90 mb-8 max-w-2xl mx-auto">Get more visibility and attract more potential buyers by boosting your property listing</p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="@Url.Action("Properties", "Home")" class="bg-white text-blue-700 hover:bg-gray-100 font-medium rounded-lg text-base px-6 py-3.5 transition-all duration-300 flex items-center justify-center">
                <i class="fa-solid fa-house-user mr-2"></i> View All Properties
            </a>
            <a href="#" class="bg-transparent border-2 border-white text-white hover:bg-white hover:text-blue-700 font-medium rounded-lg text-base px-6 py-3.5 transition-all duration-300 flex items-center justify-center">
                <i class="fa-solid fa-rocket mr-2"></i> Boost Your Property
            </a>
        </div>
    </div>
</section>

<!-- Back to Top Button -->
<button id="backToTopBtn" class="fixed bottom-6 right-6 p-3 bg-sky-600 text-white rounded-full shadow-md opacity-0 transition-opacity duration-300 hover:bg-sky-700">
    <i class="fa-solid fa-arrow-up"></i>
</button>

<!-- Toast Container -->
<div id="toastContainer" class="fixed bottom-4 right-4 z-50"></div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Apply filters button
        document.getElementById('applyFilters').addEventListener('click', () => {
            filterProperties();
        });

        // Clear filters functionality
        document.getElementById('clearFilters').addEventListener('click', function() {
            document.getElementById('filterForm').reset();
            filterProperties();
        });

        // Reset filters button in "No properties found" section
        document.getElementById('resetFiltersBtn').addEventListener('click', function() {
            document.getElementById('filterForm').reset();
            filterProperties();
        });

        // Filter properties function
        function filterProperties() {
            const propertyType = document.getElementById('propertyType').value;
            const district = document.getElementById('district').value;
            const priceRange = document.getElementById('priceRange').value;

            const propertyCards = document.querySelectorAll('.property-card');
            let visibleCount = 0;

            propertyCards.forEach(card => {
                let isVisible = true;

                // Filter by property type
                if (propertyType && card.getAttribute('data-type') !== propertyType) {
                    isVisible = false;
                }

                // Filter by district
                if (district && card.getAttribute('data-district') !== district) {
                    isVisible = false;
                }

                // Filter by price range
                if (priceRange) {
                    const price = parseFloat(card.getAttribute('data-price'));
                    if (priceRange.includes('-')) {
                        const [min, max] = priceRange.split('-').map(Number);
                        if (price < min || price > max) {
                            isVisible = false;
                        }
                    } else if (priceRange.endsWith('+')) {
                        const min = parseFloat(priceRange.replace('+', ''));
                        if (price < min) {
                            isVisible = false;
                        }
                    }
                }

                // Show or hide the card
                if (isVisible) {
                    card.classList.remove('hidden');
                    visibleCount++;
                } else {
                    card.classList.add('hidden');
                }
            });

            // Update property count
            document.getElementById('propertyCount').textContent = visibleCount;

            // Show or hide "No results" message
            const noResultsMessage = document.getElementById('noResultsMessage');
            if (visibleCount === 0) {
                noResultsMessage.classList.remove('hidden');
            } else {
                noResultsMessage.classList.add('hidden');
            }
        }

        // Sort functionality
        document.getElementById('sortOption').addEventListener('change', function() {
            const sortValue = this.value;
            const propertiesGrid = document.getElementById('propertiesGrid');
            const propertyCards = Array.from(document.querySelectorAll('.property-card:not(.hidden)'));

            propertyCards.sort((a, b) => {
                if (sortValue === 'price-asc') {
                    return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));
                } else if (sortValue === 'price-desc') {
                    return parseFloat(b.getAttribute('data-price')) - parseFloat(a.getAttribute('data-price'));
                } else if (sortValue === 'newest') {
                    return parseInt(b.getAttribute('data-id')) - parseInt(a.getAttribute('data-id'));
                }
                return 0;
            });

            // Clear the grid and append sorted items
            propertyCards.forEach(card => {
                card.style.opacity = '0';
            });

            setTimeout(() => {
                propertiesGrid.innerHTML = '';
                propertyCards.forEach(card => {
                    card.style.opacity = '0';
                    propertiesGrid.appendChild(card);
                    // Trigger reflow
                    void card.offsetWidth;
                    // Fade in
                    card.style.transition = 'opacity 0.3s ease-in-out';
                    card.style.opacity = '1';
                });
            }, 300);
        });

        // Back to top button
        const backToTopBtn = document.getElementById('backToTopBtn');

        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                backToTopBtn.style.opacity = '1';
            } else {
                backToTopBtn.style.opacity = '0';
            }
        });

        backToTopBtn.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    });

    // Toggle favorite function
    function toggleFavorite(propertyId, button) {
        // Get the CSRF token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // Disable the button during the request
        button.disabled = true;

        fetch('/Home/ToggleFavorite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: `propertyId=${propertyId}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update all instances of this property's favorite button
                const allButtons = document.querySelectorAll(`.favorite-btn[onclick*="${propertyId}"]`);

                allButtons.forEach(btn => {
                    const icon = btn.querySelector('i');

                    if (data.isFavorite) {
                        // Change to filled heart
                        icon.classList.remove('fa-regular');
                        icon.classList.add('fa-solid', 'text-red-500');

                        showToast('Property added to favorites', 'success');
                    } else {
                        // Change to outline heart
                        icon.classList.remove('fa-solid', 'text-red-500');
                        icon.classList.add('fa-regular');

                        showToast('Property removed from favorites', 'info');
                    }
                });
            } else {
                showToast(data.message || 'Error updating favorites', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Error updating favorites', 'error');
        })
        .finally(() => {
            // Re-enable the button
            button.disabled = false;
        });
    }

    // Toast notification function
    function showToast(message, type = 'info') {
        // Remove existing toasts
        const existingToasts = document.querySelectorAll('.toast-notification');
        existingToasts.forEach(toast => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        });

        // Create new toast
        const toast = document.createElement('div');
        toast.className = `toast-notification toast-${type}`;
        toast.textContent = message;

        // Add to document
        document.body.appendChild(toast);

        // Auto-remove after 3 seconds
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                if (toast.parentNode && document.body.contains(toast)) {
                    document.body.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
</script>