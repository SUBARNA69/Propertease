<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PROPERTEASE - Real Estate</title>

    <!-- Include any necessary CSS files here -->
    <link href="~/lib/flowbite/flowbite.css" rel="stylesheet" />
    <link href="~/css/site.css" asp-append-version="true" />

    <!-- Include any necessary JS files here -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/flowbite/flowbite.min.js"></script>
</head>
<body>
    <header>
        <nav class="bg-white border-gray-200 dark:bg-gray-900">
            <div class="p-4 mx-auto flex max-w-screen-xl flex-wrap items-center justify-between">
                <!-- Left side: PROPERTEASE -->
                <a asp-controller="Home" asp-action="Home" class="text-2xl w-1/3 font-semibold dark:text-white">PROPERTEASE</a>

                <!-- Center: Home, Properties, About -->
                @* Add any center links if necessary *@

                <!-- Right side: Conditional Login/Profile -->
                @if (User.Identity != null && User.Identity.IsAuthenticated)
                {
                    <div class="flex space-x-8">
                        @if (User.IsInRole("Buyer"))
                        {
                            <a asp-controller="Home" asp-action="Home" class="text-gray-900 hover:text-blue-500">Home</a>
                            <a asp-controller="Home" asp-action="Properties" class="text-gray-900 hover:text-blue-500">Properties</a>
                            <a asp-controller="Home" asp-action="About" class="text-gray-900 hover:text-blue-500">About</a>
                            <a asp-controller="Home" asp-action="Forum" class="text-gray-900 hover:text-blue-500">Forum</a>
                            <a asp-controller="Home" asp-action="ModelViewer" class="text-gray-900 hover:text-blue-500">3d</a>
                        }
                        @* Role-based navigation links *@
                        else if (User.IsInRole("Seller"))
                        {
                            <!-- Seller-specific navigation links -->
                            <a asp-controller="Seller" asp-action="Dashboard" class="text-gray-900 hover:text-blue-500">Dashboard</a>
                            <a asp-controller="Seller" asp-action="Listings" class="text-gray-900 hover:text-blue-500">My Listings</a>
                            <a asp-controller="Activity" asp-action="Index" class="text-gray-900 hover:text-blue-500">Activity</a>
                            <a asp-controller="Seller" asp-action="MyProperties" class="text-gray-900 hover:text-blue-500">Boosted Properties</a>
                        }
                        else if (User.IsInRole("Admin"))
                        {
                            <!-- Admin-specific navigation links -->
                            <a asp-controller="Admin" asp-action="Dashboard" class="text-gray-900 hover:text-blue-500">Dashboard</a>
                            <a asp-controller="Admin" asp-action="AdminRequests" class="text-gray-900 hover:text-blue-500">Property Request</a>
                            <a asp-controller="Admin" asp-action="AllProperties" class="text-gray-900 hover:text-blue-500">Property Management</a>
                            <a asp-controller="Admin" asp-action="UsersManagement" class="text-gray-900 hover:text-blue-500">User Management</a>
                            <a asp-controller="Admin" asp-action="Index" class="text-gray-900 hover:text-blue-500">Feedback</a>
                            <a asp-controller="Admin" asp-action="Index" class="text-gray-900 hover:text-blue-500">Support</a>
                        }
                    </div>

                    <div class="flex space-x-4 items-center">
                        <!-- Notification Button -->
                        <button id="notification-button" class="relative bg-gray-800 text-white rounded-full p-2">
                            <span class="sr-only">Open notifications</span>
                            <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405C19.281 14.234 19 13.62 19 13V9c0-3.866-3.134-7-7-7S5 5.134 5 9v4c0 .62-.281 1.234-.595 1.595L3 17h5m4 0v2a2 2 0 104 0v-2m-6 0h6"></path>
                            </svg>
                            <span id="notification-badge" class="absolute top-0 right-0 text-xs bg-red-500 text-white rounded-full w-4 h-4 flex items-center justify-center hidden">0</span>
                        </button>
                        <!-- Update your notification-panel div with this enhanced version -->
                        <div id="notification-panel" class="hidden absolute right-0 top-[72px] bg-white rounded-lg shadow-lg w-72 max-h-96 overflow-y-auto z-50">
                            <div class="p-4">
                                <div class="flex justify-between items-center mb-2">
                                    <h3 class="text-lg font-semibold text-gray-800">Notifications</h3>
                                    <button id="clear-notifications" class="text-xs text-blue-600 hover:text-blue-800">Clear All</button>
                                </div>
                                <ul id="notification-list" class="mt-2">
                                    <!-- Notifications will be dynamically added here -->
                                    <li class="text-sm text-gray-700 py-2 border-b empty-notification">No new notifications</li>
                                </ul>
                            </div>
                        </div>

                        <!-- Profile Button -->
                        <button id="profile-button" class="bg-gray-800 text-white rounded-full p-2">
                            <span class="sr-only">Open user menu</span>
                            <svg class="w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                            </svg>
                        </button>
                    </div>
                    <!-- Profile Dropdown -->
                    <div id="profile-dropdown" class="hidden absolute right-0 top-[72px] bg-white rounded-lg shadow-lg w-48">
                        <ul>
                            <li><a asp-action="Profile" asp-controller="User" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Profile</a></li>
                            <li><a asp-action="UpdatePassword" asp-controller="User" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Change Password</a></li>
                            <li>
                                <a asp-controller="User" asp-action="Logout" class="block px-4 py-2 text-gray-700 hover:bg-gray-100">Logout</a>
                            </li>
                        </ul>
                    </div>
                }
                else
                {
                    <!-- Login button for non-logged-in users -->
                    <a asp-controller="User" asp-action="Login" class="bg-blue-500 text-white rounded-full px-4 py-2 hover:bg-blue-600">Login</a>
                }
            </div>
        </nav>
    </header>

    <div class="mt-5 container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - PROPERTEASE - <a href="#">Privacy</a>
        </div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.min.js" integrity="sha512-7SRCYIJtR6F8ocwW7UxW6wGKqbSyqREDbfCORCbGLatU0iugBLwyOXpzhkPyHIFdBO0K2VCu57fvP2Twgx1o2A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
                $(document).ready(function () {
            // Toggle UI elements (keep existing code)
            $('#profile-button').click(function (e) {
                e.stopPropagation();
                $('#profile-dropdown').toggleClass('hidden');
                $('#notification-panel').addClass('hidden'); // Close notifications when opening profile
            });

            $('#notification-button').click(function (e) {
                e.stopPropagation();
                $('#notification-panel').toggleClass('hidden');
                $('#profile-dropdown').addClass('hidden'); // Close profile when opening notifications

                // Mark as read when opening
                if (!$('#notification-panel').hasClass('hidden')) {
                    markNotificationsAsRead();
                }
            });

            // Close dropdowns when clicking elsewhere
            $(document).click(function() {
                $('#profile-dropdown').addClass('hidden');
                $('#notification-panel').addClass('hidden');
            });

            // Prevent clicks inside the dropdown from closing it
            $('#profile-dropdown, #notification-panel').click(function(e) {
                e.stopPropagation();
            });

            // Clear all notifications
            $('#clear-notifications').click(function() {
                clearNotifications();
            });

                  // Build the connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .withAutomaticReconnect([0, 2000, 5000, 10000, 30000]) // Better reconnection strategy
            .build();

        // Start the connection with logging
        function startConnection() {
            connection.start()
                .then(() => {
                    console.log("Connected to NotificationHub.");
                    // This will automatically get unread notifications from database
                    // We don't need to invoke it explicitly since we've added it to OnConnectedAsync
                })
                .catch(err => {
                    console.error("Error connecting to NotificationHub:", err.toString());
                    // Try to reconnect after 5 seconds
                    setTimeout(startConnection, 5000);
                });
        }

        startConnection();

            // Handle reconnection events
            connection.onreconnecting(error => {
                console.log("Connection lost. Attempting to reconnect...");
            });

            connection.onreconnected(connectionId => {
                console.log("Connection reestablished. ConnectionId:", connectionId);
                // Re-fetch notifications after reconnection
                connection.invoke("GetUnreadNotifications").catch(err => {
                    console.error("Error getting unread notifications after reconnect:", err.toString());
                });
            });

            connection.onclose(error => {
                console.log("Connection closed. Attempting to restart...");
                startConnection();
            });

            // Listen for real-time notifications
            connection.on("ReceiveNotification", function (message) {
                console.log("Notification received:", message);
                addNotification({
                    id: null, // No database ID yet for real-time notifications
                    message: message,
                    timestamp: new Date().toLocaleTimeString() + ' ' + new Date().toLocaleDateString(),
                    isUnread: true
                });
            });

            // Listen for loading unread notifications from database
            connection.on("LoadUnreadNotifications", function (notifications) {
                console.log("Loaded unread notifications:", notifications);
                // Clear existing notifications before loading from database
                $('#notification-list').empty();

                if (notifications.length === 0) {
                    $('#notification-list').html('<li class="text-sm text-gray-700 py-2 border-b empty-notification">No new notifications</li>');
                } else {
                    // Add database notifications
                    notifications.forEach(notification => {
                        addNotification({
                            id: notification.id,
                            message: notification.message,
                            timestamp: new Date(notification.createdAt).toLocaleTimeString() + ' ' + new Date(notification.createdAt).toLocaleDateString(),
                            isUnread: !notification.isRead
                        });
                    });
                }
            });

            // Add a notification with timestamp
            function addNotification(notification) {
                const notificationList = $('#notification-list');

                // Remove the empty notification message if present
                $('.empty-notification').remove();

                // Create notification with timestamp and unique ID
                const notificationId = notification.id ? `db-notification-${notification.id}` : 'notification-' + Date.now();
                const notificationHtml = `
                    <li id="${notificationId}" class="notification-item text-sm text-gray-700 py-2 px-2 border-b hover:bg-gray-100 ${notification.isUnread ? 'unread' : ''}">
                        <div class="flex justify-between">
                            <span class="notification-text">${notification.message}</span>
                            <button class="delete-notification text-gray-400 hover:text-red-500" data-id="${notification.id || ''}">×</button>
                        </div>
                        <div class="text-xs text-gray-500 mt-1">${notification.timestamp}</div>
                    </li>
                `;

                notificationList.prepend(notificationHtml);

                // Save notifications to localStorage (for fallback)
                saveNotifications();

                // Update notification count
                updateNotificationCount();
            }

            // Update notification count
            function updateNotificationCount() {
                const unreadCount = $('.notification-item.unread').length;
                updateNotificationBadge(unreadCount);
            }

            // Update notification badge
            function updateNotificationBadge(count) {
                const badge = $('#notification-badge');
                const unreadCount = count || $('.notification-item.unread').length;

                if (unreadCount > 0) {
                    badge.text(unreadCount);
                    badge.removeClass('hidden');
                } else {
                    badge.addClass('hidden');
                }
            }

            // Mark notifications as read
            function markNotificationsAsRead() {
                // Track which database notifications need to be marked as read
                $('.notification-item.unread').each(function() {
                    const $item = $(this);
                    const id = $item.attr('id');

                    // If it's a database notification
                    if (id && id.startsWith('db-notification-')) {
                        const dbId = parseInt(id.replace('db-notification-', ''));
                        if (dbId) {
                            // Call hub method to mark as read in database
                            connection.invoke("MarkAsRead", dbId).catch(err => {
                                console.error("Error marking notification as read:", err.toString());
                            });
                        }
                    }

                    // Remove unread class
                    $item.removeClass('unread');
                });

                updateNotificationBadge(0);
                saveNotifications();
            }

            // Save notifications to localStorage (as fallback)
            function saveNotifications() {
                const notifications = [];
                $('#notification-list .notification-item').each(function() {
                    const id = $(this).attr('id');
                    // Only save non-database notifications to localStorage
                    if (!id.startsWith('db-notification-')) {
                        notifications.push({
                            id: id,
                            message: $(this).find('.notification-text').text(),
                            timestamp: $(this).find('.text-xs').text(),
                            isUnread: $(this).hasClass('unread')
                        });
                    }
                });

                localStorage.setItem('notifications', JSON.stringify(notifications));
            }

            // Clear all notifications
            function clearNotifications() {
                // Clear database notifications first
                $('#notification-list .notification-item').each(function() {
                    const id = $(this).attr('id');
                    if (id && id.startsWith('db-notification-')) {
                        const dbId = parseInt(id.replace('db-notification-', ''));
                        if (dbId) {
                            // Call hub method to mark as read
                            connection.invoke("MarkAsRead", dbId).catch(err => {
                                console.error("Error marking notification as read:", err.toString());
                            });
                        }
                    }
                });

                // Clear UI
                $('#notification-list').html('<li class="text-sm text-gray-700 py-2 border-b empty-notification">No new notifications</li>');
                updateNotificationBadge(0);
                localStorage.removeItem('notifications');
            }

            // Delete individual notification
            $(document).on('click', '.delete-notification', function(e) {
                e.stopPropagation();
                const $item = $(this).closest('.notification-item');
                const id = $item.attr('id');
                const dbId = $(this).data('id');

                // If it's a database notification
                if (dbId && id.startsWith('db-notification-')) {
                    // Call hub method to mark as read
                    connection.invoke("MarkAsRead", dbId).catch(err => {
                        console.error("Error marking notification as read:", err.toString());
                    });
                }

                // Remove from UI
                $item.remove();

                // If no notifications left, show empty state
                if ($('.notification-item').length === 0) {
                    $('#notification-list').html('<li class="text-sm text-gray-700 py-2 border-b empty-notification">No new notifications</li>');
                }

                saveNotifications();
                updateNotificationCount();
            });
        });

        @RenderSection("Scripts", required: false)
        @RenderSection("Styles", required: false)

    </script>

</body>
</html>
